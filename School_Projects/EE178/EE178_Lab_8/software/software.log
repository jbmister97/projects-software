KCPSM6 Assembler log file for program 'C:\Users\Justin\Documents\4th School Year\Fall 2016 Semester\EE178\Vivado Projects\EE178_Lab_8\software\software.psm'.
Generated by KCPSM6 version v2.51
Ken Chapman - Xilinx Ltd - 29th May 2013

Assembly datestamp: 12 Dec 2016
Assembly timestamp: 21:05:06

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 7FF hex
Nominal program memory size: 2K (2048)   address(10:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 1366
Memory locations available: 2730


Assembly listing

 Addr Code                   Instruction

 000                         ;;============================================================================
 000                         ;; File: software.psm
 000                         ;; This is the PicoBlaze example game program for EE178 Lab #8.
 000                         ;; No guarantee this is bug-free but it is a playable example.
 000                         ;;============================================================================
 000                         ;;============================================================================
 000                         ;; Ports and related constants.
 000                         ;;============================================================================
 000                         CONSTANT stax, 00                          ; port for 8-bit start-x
 000                         CONSTANT stay, 01                          ; port for 8-bit start-y
 000                         CONSTANT endx, 02                          ; port for 8-bit end-x
 000                         CONSTANT endy, 03                          ; port for 8-bit end-y
 000                         CONSTANT busy, 04                          ; port for 8-bit busy
 000                         CONSTANT beam, 05                          ; port for 8-bit beam
 000                         CONSTANT mode, 06                          ; port for 8-bit mode
 000                         CONSTANT prng, 07                          ; port for 8-bit prng
 000                         CONSTANT leds_lo, 08                       ; port for 8-bit led data out
 000                         CONSTANT leds_hi, 09                       ; port for 8-bit led data out
 000                         CONSTANT qssd_lo, 0A                       ; port for 8-bit qssd data out
 000                         CONSTANT qssd_hi, 0B                       ; port for 8-bit qssd data out
 000                         CONSTANT qssd_dp, 0C                       ; port for 8-bit qssd data out
 000                         CONSTANT switches_lo, 0D                   ; port for 8-bit switch input
 000                         CONSTANT switches_hi, 0E                   ; port for 8-bit switch input
 000                         CONSTANT buttons, 0F                       ; port for 8-bit button input
 000                         CONSTANT busy_go, 01                       ; go command and busy status
 000                         CONSTANT beam_hi, 0F                       ; beam high intensity
 000                         CONSTANT beam_md, 07                       ; beam med intensity
 000                         CONSTANT beam_lo, 03                       ; beam low intensity
 000                         CONSTANT mode_hld, 00                      ; mode hold framebuffer
 000                         CONSTANT mode_clr, 01                      ; mode clear framebuffer
 000                         CONSTANT mode_lin, 02                      ; mode linear decay
 000                         CONSTANT mode_exp, 03                      ; mode exponential decay
 000                         CONSTANT buttons_ct, 10                    ; center
 000                         CONSTANT buttons_up, 08                    ; up
 000                         CONSTANT buttons_dn, 04                    ; down
 000                         CONSTANT buttons_lf, 02                    ; left
 000                         CONSTANT buttons_rt, 01                    ; right
 000                         ;;============================================================================
 000                         ;; Game state declarations.
 000                         ;;============================================================================
 000                         NAMEREG s0, gs_major
 000                         CONSTANT gs_major_attrone, 00              ; state assignment
 000                         CONSTANT gs_major_attrtwo, 01              ; state assignment
 000                         CONSTANT gs_major_playing, 02              ; state assignment
 000                         CONSTANT gs_major_gameend, 03              ; state assignment
 000                         NAMEREG s1, gs_minor
 000                         CONSTANT gs_minor_begins, 00               ; counter initialize
 000                         CONSTANT gs_minor_twosec, 78               ; frame count about 2.0 secs
 000                         CONSTANT gs_minor_onesec, 3C               ; frame count about 1.0 secs
 000                         CONSTANT gs_minor_getrdy, 1E               ; frame count about 0.5 secs
 000                         ;; For bullet  ~~~~~MODIFY FOR USER BULLET~~~~~
 000                         NAMEREG s2, gs_ballx
 000                         NAMEREG s3, gs_bally
 000                         CONSTANT gs_ball_ydim, 03                  ; it's this plus 1   ;; Length of bullet (used later in draw_gs)
 000                         CONSTANT gs_ball_speed, 02                 ; pixels per frame (speed of bullet)
 000                         ;; For spaceship  ~~~~~MODIFY FOR SPACE SHIP~~~~~
 000                         NAMEREG s6, gs_padlx
 000                         CONSTANT gs_padly, E5                      ; spaceship y-location (unsigned)
 000                         CONSTANT gs_padl_xdim, 16                  ; added to x-location of spaceship to draw width of spaceship
 000                         CONSTANT gs_padl_ydim, 08                  ; added to y-location of spaceship to draw height of spaceship
 000                         CONSTANT gs_padl_xdim1, 06                 ; for the spaceship gun
 000                         CONSTANT gs_padl_xdimmid, 0A               ; for center of spaceship
 000                         CONSTANT gs_padl_xdim2, 10                 ; for the spaceship gun
 000                         CONSTANT gs_padl_ydim1, 03                 ; for the spaceship gun
 000                         CONSTANT gs_padlyfull, 20                  ; distance between bottom and top of spaceship
 000                         CONSTANT gs_padl_speed, 04                 ; pixels per frame (speed of space ship)
 000                         ;;============================================================================
 000                         ;; Global variables.
 000                         ;;============================================================================
 000                         NAMEREG s7, loopvar                        ; reserved
 000                         NAMEREG s8, loopvar2                       ; reserved
 000                         NAMEREG s9, xpos                           ; for drawing routines
 000                         NAMEREG sA, ypos                           ; for drawing routines
 000                         NAMEREG sB, alien_projx
 000                         NAMEREG sC, alien_projy
 000                         NAMEREG sD, btnsamp                        ; button sample
 000                         NAMEREG sE, deltax
 000                         NAMEREG sF, scratch                        ; for scratch
 000                         ;; FOR ALIEN COLUMNS
 000                         CONSTANT col1, 15'd                        ; decimal 15
 000                         CONSTANT col2, 35'd                        ; decimal 35
 000                         CONSTANT col3, 55'd                        ; decimal 55
 000                         CONSTANT col4, 75'd                        ; decimal 115
 000                         CONSTANT col5, 95'd                        ; decimal 145
 000                         CONSTANT col6, 115'd                       ; decimal 90
 000                         CONSTANT col7, 135'd                       ; decimal 100
 000                         CONSTANT col8, 155'd                       ; decimal 115
 000                         CONSTANT col9, 7D                          ; decimal 125
 000                         CONSTANT col10, 8C                         ; decimal 140
 000                         CONSTANT col11, 96                         ; decimal 150
 000                         CONSTANT col12, A5                         ; decimal 165
 000                         CONSTANT col13, AF                         ; decimal 175
 000                         CONSTANT col14, BE                         ; decimal 190
 000                         ;; FOR ALIENS
 000                         CONSTANT ramshiftx, 01                     ; address for +1 or -1 for delta x
 000                         CONSTANT ramalieny, 02                     ; address for alien y coordinate
 000                         CONSTANT ramwait, 03                       ; address for wait for aliens
 000                         CONSTANT ramprojx1, 04                     ; address for x1 for alien projectile
 000                         CONSTANT ramprojx2, 05                     ; address for x2 for alien projectile
 000                         CONSTANT ramprojy1, 06                     ; address for y1 for alien projectile
 000                         CONSTANT ramprojy2, 07                     ; address for y2 for alien projectile
 000                         CONSTANT ramrandom, 08                     ; address for random number
 000                         CONSTANT ramenable, 09                     ; address for enable projectile value
 000                         CONSTANT ramdownen, 0A                     ; address for enable left side down shift
 000                         CONSTANT ramprojwait, 0B                   ; address for wait for projectiles
 000                         CONSTANT ramprojdeltawait, 0C              ; address for proj delta y wait
 000                         CONSTANT ramdeltaxen, 0D                   ; address for enable delta x
 000                         CONSTANT ramdeltaycount, 0E                ; address for delta y count
 000                         CONSTANT ramalienx, 0F                     ; address for alien x coordinate
 000                         CONSTANT ramalienlives1, 10                ; address for first row of alien lives
 000                         CONSTANT ramhitboxx, 11                    ; address for hitbox x coordinate
 000                         CONSTANT ramhitboxy, 12                    ; address for hitbox y coordinate
 000                         CONSTANT ramshipbullettip, 13              ; address for tip of ship's bullet
 000                         CONSTANT ramalienhit, 14                   ; address for if an alien is hit
 000                         CONSTANT ramshiphitboxx, 15                ; address for ship hitbox start x coordinate
 000                         CONSTANT ramshiphitboxy, 16                ; address for ship hitbox start y coordinate
 000                         CONSTANT ramshiplife, 17                   ; address for ship's life
 000                         CONSTANT ramalienlives2, 18                ; address for second row of alien lives
 000                         CONSTANT ramalienlives3, 19                ; address for third row of alien lives
 000                         CONSTANT row1, 19                          ; decimal 25
 000                         CONSTANT deltarow2, 0F
 000                         CONSTANT waittime, 04
 000                         CONSTANT projwaittime, 01
 000                         CONSTANT bottom_border1, FA
 000                         CONSTANT bottom_border2, FB
 000                         CONSTANT bottom_border3, FC
 000                         CONSTANT bottom_border4, FD
 000                         CONSTANT bottom_border5, FE
 000                         CONSTANT bottom_border6, FF
 000                         CONSTANT deltaxen, 01
 000                         ;;============================================================================
 000                         ;; Other stuff.
 000                         ;;============================================================================
 000                         CONSTANT minusone, FF                      ; minusone
 000                         CONSTANT minusmax, 80                      ; minus 128
 000                         CONSTANT plusmax, 7F                       ; plus 127
 000                         CONSTANT zero, 00                          ; zero
 000                         CONSTANT one, 01                           ; one
 000                         ;;============================================================================
 000                         ;; Boot.
 000                         ;; This performs one-time initialization of the hardware and the game state.
 000                         ;;============================================================================
 000  2001B            boot: CALL 01B[hw_init]                          ; initial hardware setup
 001  20029                  CALL 029[gs_init]                          ; set initial game state
 002  2007A                  CALL 07A[reset_bullet]
 003  01F19                  LOAD sF[scratch], 19[row1]
 004  2FF02                  STORE sF[scratch], 02[ramalieny]
 005  01F00                  LOAD sF[scratch], 00[zero]
 006  01F00                  LOAD sF[scratch], 00[zero]
 007  01F00                  LOAD sF[scratch], 00
 008  2FF0A                  STORE sF[scratch], 0A[ramdownen]
 009  2FF0B                  STORE sF[scratch], 0B[ramprojwait]
 00A  2FF0C                  STORE sF[scratch], 0C[ramprojdeltawait]
 00B  2FF0E                  STORE sF[scratch], 0E[ramdeltaycount]
 00C  2FF03                  STORE sF[scratch], 03[ramwait]             ; zero out wait
 00D  2FF06                  STORE sF[scratch], 06[ramprojy1]           ; zero out alien_projy
 00E  01F01                  LOAD sF[scratch], 01
 00F  2FF0D                  STORE sF[scratch], 0D[ramdeltaxen]
 010  2FF17                  STORE sF[scratch], 17[ramshiplife]
 011  01FFF                  LOAD sF[scratch], FF
 012  2FF10                  STORE sF[scratch], 10[ramalienlives1]      ; initialize alien lives
 013  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 014  2FF19                  STORE sF[scratch], 19[ramalienlives3]
 015  28001                  ENABLE INTERRUPT                           ; enable vblnk interrupt
 016                         ;;============================================================================
 016                         ;; Main.
 016                         ;; This is an empty loop, does nothing, waiting for interrupts to occur.
 016                         ;;============================================================================
 016  22016            main: JUMP 016[main]                             ; empty loop, does nothing
 017                         ;;============================================================================
 017                         ;; Interrupt.
 017                         ;; This is the main game logic.  At each interrupt, the procedure is to read
 017                         ;; the user input, calculate the next game state, and then draw the game
 017                         ;; state on the display.
 017                         ;;============================================================================
 017  2002C             isr: CALL 02C[user_input]                       ; get the user input
 018  2002E                  CALL 02E[calc_next_gs]                     ; calculate next state
 019  20090                  CALL 090[draw_gs]                          ; draw the state
 01A  29001                  RETURNI ENABLE                             ; return with enable
 01B                         ;;============================================================================
 01B                         ;; Subroutine: hw_init
 01B                         ;; This puts the hardware into a known, initial state.  This includes a wait
 01B                         ;; to make sure the line drawing harware is idle (a wait loop which is also
 01B                         ;; called from other routines, as a subroutine).
 01B                         ;;============================================================================
 01B  01F00         hw_init: LOAD sF[scratch], 00[zero]                 ; going to use lot of zero
 01C  2DF08                  OUTPUT sF[scratch], 08[leds_lo]            ; turn off lo leds
 01D  2DF09                  OUTPUT sF[scratch], 09[leds_hi]            ; turn off hi leds
 01E  2DF0A                  OUTPUT sF[scratch], 0A[qssd_lo]            ; zeroize qssd lo
 01F  2DF0B                  OUTPUT sF[scratch], 0B[qssd_hi]            ; zeroize qssd hi
 020  2DF0C                  OUTPUT sF[scratch], 0C[qssd_dp]            ; turn off qssd dots
 021  01F03                  LOAD sF[scratch], 03[mode_exp]             ; load desired mode
 022  2DF06                  OUTPUT sF[scratch], 06[mode]               ; program the framebuffer
 023  01F0F                  LOAD sF[scratch], 0F[beam_hi]              ; load desired beam
 024  2DF05                  OUTPUT sF[scratch], 05[beam]               ; program the framebuffer
 025  09F04    hw_init_wait: INPUT sF[scratch], 04[busy]                ; get framebuffer busy
 026  1DF01                  COMPARE sF[scratch], 01[busy_go]           ; check framebuffer busy
 027  32025                  JUMP Z, 025[hw_init_wait]                  ; back to wait if busy
 028  25000                  RETURN                                     ; return
 029                         ;;============================================================================
 029                         ;; Subroutine: gs_init
 029                         ;; This puts the game into a known, initial state.  I've assigned all of the
 029                         ;; game state to a known value -- although some of these assignments do not
 029                         ;; really matter based on design of the game state machine.
 029                         ;;============================================================================
 029  01000         gs_init: LOAD s0[gs_major], 00[gs_major_attrone]    ; start in attract mdoe
 02A  01100                  LOAD s1[gs_minor], 00[gs_minor_begins]     ; start with counter zero
 02B  25000                  RETURN                                     ; return
 02C                         ;;============================================================================
 02C                         ;; Subroutine: user_input
 02C                         ;; This samples the user inputs required for this game (which happens to be
 02C                         ;; only the buttons, but this could is extended to the switches as well).
 02C                         ;; This subroutine calls an example of how to use the RAM scratchpad, by
 02C                         ;; implementing access of a 256x8 array using switches, button, and qssd.
 02C                         ;; The call to the ram_example routine (and ram_example routine itself)
 02C                         ;; can be entirely removed as it is not needed in this game.
 02C                         ;;============================================================================
 02C  09D0F      user_input: INPUT sD[btnsamp], 0F[buttons]             ; sample button hardware
 02D  25000                  RETURN                                     ; return
 02E                         ;;============================================================================
 02E                         ;; Subroutine: calc_next_gs
 02E                         ;; This logic calculates the next state of the game, given the sampled user
 02E                         ;; inputs and the current state of the game.
 02E                         ;;============================================================================
 02E  1D000    calc_next_gs: COMPARE s0[gs_major], 00[gs_major_attrone] ; are we in attrone?
 02F  32037                  JUMP Z, 037[calc_attrone]                  ; do ns calc for attrone
 030  1D001                  COMPARE s0[gs_major], 01[gs_major_attrtwo] ; are we in attrtwo?
 031  3203D                  JUMP Z, 03D[calc_attrtwo]                  ; do ns calc for attrtwo
 032  1D002                  COMPARE s0[gs_major], 02[gs_major_playing] ; are we in playing?
 033  32043                  JUMP Z, 043[calc_playing]                  ; do ns calc for playing
 034  1D003                  COMPARE s0[gs_major], 03[gs_major_gameend] ; are we in gameend?
 035  32080                  JUMP Z, 080[calc_gameend]                  ; do ns calc for gameend
 036  25000                  RETURN                                     ; return
 037  0DD10    calc_attrone: TEST sD[btnsamp], 10[buttons_ct]
 038  3608A                  JUMP NZ, 08A[goto_playing]
 039  1D178                  COMPARE s1[gs_minor], 78[gs_minor_twosec]
 03A  32087                  JUMP Z, 087[goto_attrtwo]
 03B  11101                  ADD s1[gs_minor], 01[one]
 03C  25000                  RETURN 
 03D  0DD10    calc_attrtwo: TEST sD[btnsamp], 10[buttons_ct]
 03E  3608A                  JUMP NZ, 08A[goto_playing]
 03F  1D13C                  COMPARE s1[gs_minor], 3C[gs_minor_onesec]
 040  32084                  JUMP Z, 084[goto_attrone]
 041  11101                  ADD s1[gs_minor], 01[one]
 042  25000                  RETURN 
 043                         ;; Gameplay state
 043           calc_playing: 
 043  20047                  CALL 047[upd_padl]                         ;; Unconditional CALL to subroutine upd_padl
 044  2005E                  CALL 05E[upd_ball]
 045  01702                  LOAD s7[loopvar], 02[gs_ball_speed]
 046                         ;; Do something similar to above except for when alien's bullet hits spaceship or when all aliens are gone
 046           keep_playing: 
 046  25000                  RETURN 
 047               upd_padl: ;; This section loads a zero to the scratch register and checks for button press by
 047                         ;; modifying the scratch register respectfully to the input
 047                         ;; Then, a COMPARE instruction is used to jump to the section which defines what happens during button press
 047                         ;; LIGHT AND RIGHT BUTTONS TO MOVE LEFT AND RIGHT
 047  01F00                  LOAD sF[scratch], 00[zero]                 ;; LOAD zero to scratch register
 048  0DD02                  TEST sD[btnsamp], 02[buttons_lf]           ;; If left button is pressed/held
 049  1BF00                  SUBCY sF[scratch], 00[zero]                ;; Subtracts zero from scratch register if left button is pressed/held (scratch = -1)
 04A  0DD01                  TEST sD[btnsamp], 01[buttons_rt]           ;; If right button is pressed/held
 04B  13F00                  ADDCY sF[scratch], 00[zero]                ;; Adds zero from to scratch register if right button is pressed/held (scratch = 1)
 04C  1DFFF                  COMPARE sF[scratch], FF[minusone]          ;; If scratch = -1, execute next instruction
 04D  30053                  CALL Z, 053[upd_padl_lt]                   ;; Calls subroutine upd_padl_lt if zero flag state is specified (section that defines what happens when left button is pressed/held)
 04E  1DF01                  COMPARE sF[scratch], 01[one]               ;; If scratch = 1, execute next instruction
 04F  30057                  CALL Z, 057[upd_padl_rt]                   ;; Calls subroutine upd_padl_rt if zero flag state is specified (section that defines what happens when right button is pressed/held)
 050                         ;; DOWN BUTTON TO RESTART GAME
 050  1DD04                  COMPARE sD[btnsamp], 04[buttons_dn]        ;; If down button is pressesd/held
 051                         ;CALL reset_bullet
 051  3208D                  JUMP Z, 08D[goto_gameend]                  ;; Go to goto_gameend state (end game/restart)
 052  25000                  RETURN 
 053                         ;; Subroutine that defines what happens when the left button is pressed/held
 053  19604     upd_padl_lt: SUB s6[gs_padlx], 04[gs_padl_speed]        ;; Subtracts 4 pixels per frame
 054  3D000                  RETURN NC                                  ;; If button is no longer pressed/held, return
 055  01600                  LOAD s6[gs_padlx], 00[zero]
 056  25000                  RETURN 
 057                         ;; Subroutine that defines what happens when the right button is pressed/held
 057  11604     upd_padl_rt: ADD s6[gs_padlx], 04[gs_padl_speed]        ;; Adds 4 pixels per frame
 058  00F60                  LOAD sF[scratch], s6[gs_padlx]             ;; Load contents of gs_padlx to scratch related
 059                         ;; Checks that the spaceship doesn't move past the screen
 059  11F16                  ADD sF[scratch], 16[gs_padl_xdim]
 05A  3D000                  RETURN NC
 05B  016FF                  LOAD s6[gs_padlx], FF[minusone]
 05C  19616                  SUB s6[gs_padlx], 16[gs_padl_xdim]
 05D  25000                  RETURN 
 05E                         ;; ~~~~~DESCRIBES THE BEHAVIOR OF THE BULLET (SPACESHIP)~~~~~
 05E               upd_ball: 
 05E                         ;LOAD loopvar, gs_ball_speed
 05E  01FE5                  LOAD sF[scratch], E5[gs_padly]
 05F  19F03                  SUB sF[scratch], 03[gs_padl_ydim1]
 060  1C3F0                  COMPARE s3[gs_bally], sF[scratch]
 061  3A06F                  JUMP C, 06F[fired]
 062  01F00                  LOAD sF[scratch], 00[zero]                 ;; LOAD zero to scratch register
 063  0DD02                  TEST sD[btnsamp], 02[buttons_lf]           ;; If left button is pressed/held
 064  1BF00                  SUBCY sF[scratch], 00[zero]                ;; Subtracts zero from scratch register if left button is pressed/held (scratch = -1)
 065  0DD01                  TEST sD[btnsamp], 01[buttons_rt]           ;; If right button is pressed/held
 066  13F00                  ADDCY sF[scratch], 00[zero]                ;; Adds zero from to scratch register if right button is pressed/held (scratch = 1)
 067  1DFFF                  COMPARE sF[scratch], FF[minusone]          ;; If scratch = -1, execute next instruction
 068  30076                  CALL Z, 076[move_bullet]                   ;; Calls subroutine move_left if zero flag state is specified (section that defines what happens when left button is pressed/held)
 069  1DF01                  COMPARE sF[scratch], 01[one]               ;; If scratch = 1, execute next instruction
 06A  30076                  CALL Z, 076[move_bullet]                   ;; Calls subroutine move_right if zero flag state is specified (section that defines what happens when right button
 06B  0DD08                  TEST sD[btnsamp], 08[buttons_up]
 06C  31000                  RETURN Z
 06D  1B300                  SUBCY s3[gs_bally], 00
 06E  22046                  JUMP 046[keep_playing]
 06F  19701           fired: SUB s7[loopvar], 01[one]
 070  3A047                  JUMP C, 047[upd_padl]
 071  19305                  SUB s3[gs_bally], 05
 072  1D300                  COMPARE s3[gs_bally], 00[zero]
 073  3207A                  JUMP Z, 07A[reset_bullet]
 074  25000                  RETURN 
 075  2206F        skip_hit: JUMP 06F[fired]
 076                         ;; Moves bullet with respect to the x-position of the spaceship
 076            move_bullet: ;;COMPARE btnsamp, button_up
 076                         ;;JUMP Z, bullet_release
 076  00F60                  LOAD sF[scratch], s6[gs_padlx]
 077  11F0A                  ADD sF[scratch], 0A[gs_padl_xdimmid]
 078  002F0                  LOAD s2[gs_ballx], sF[scratch]
 079  25000                  RETURN 
 07A           reset_bullet: ;; Resets bullet back to middle of spaceship
 07A  00260                  LOAD s2[gs_ballx], s6[gs_padlx]
 07B  1120A                  ADD s2[gs_ballx], 0A[gs_padl_xdimmid]
 07C  01FE5                  LOAD sF[scratch], E5[gs_padly]
 07D  19F20                  SUB sF[scratch], 20[gs_padlyfull]
 07E  013E5                  LOAD s3[gs_bally], E5[gs_padly]
 07F  25000                  RETURN 
 080  1D13C    calc_gameend: COMPARE s1[gs_minor], 3C[gs_minor_onesec]
 081  32084                  JUMP Z, 084[goto_attrone]
 082  11101                  ADD s1[gs_minor], 01[one]
 083  25000                  RETURN 
 084  01000    goto_attrone: LOAD s0[gs_major], 00[gs_major_attrone]
 085  01100                  LOAD s1[gs_minor], 00[gs_minor_begins]
 086  25000                  RETURN 
 087  01001    goto_attrtwo: LOAD s0[gs_major], 01[gs_major_attrtwo]
 088  01100                  LOAD s1[gs_minor], 00[gs_minor_begins]
 089  25000                  RETURN 
 08A  01002    goto_playing: LOAD s0[gs_major], 02[gs_major_playing]
 08B  01100                  LOAD s1[gs_minor], 00[gs_minor_begins]
 08C  25000       ballddone: RETURN 
 08D  01003    goto_gameend: LOAD s0[gs_major], 03[gs_major_gameend]
 08E  01100                  LOAD s1[gs_minor], 00[gs_minor_begins]
 08F  25000                  RETURN 
 090                         ;;============================================================================
 090                         ;; Subroutine: draw_gs
 090                         ;; This uses the current game state as input, and draws it on the display.
 090                         ;; This subroutine calls an example of how to output debug or diagnostic info
 090                         ;; using the leds.  The call to the draw_gs_debug routine (and draw_gs_debug
 090                         ;; routine itself) can be entirely remove as it is required to play the game.
 090                         ;;============================================================================
 090  2009A         draw_gs: CALL 09A[draw_gs_debug]                    ; for debug info display
 091  1D000                  COMPARE s0[gs_major], 00[gs_major_attrone] ; are we in attrone?
 092  32457                  JUMP Z, 457[draw_attrone]                  ; do drawing for attrone
 093  1D001                  COMPARE s0[gs_major], 01[gs_major_attrtwo] ; are we in attrtwo?
 094  3249D                  JUMP Z, 49D[draw_attrtwo]                  ; do drawing for attrtwo
 095  1D002                  COMPARE s0[gs_major], 02[gs_major_playing] ; are we in playing?
 096  3209D                  JUMP Z, 09D[draw_playing]                  ; do drawing for playing
 097  1D003                  COMPARE s0[gs_major], 03[gs_major_gameend] ; are we in gameend?
 098  32501                  JUMP Z, 501[draw_gameend]                  ; do drawing for gameend
 099  25000                  RETURN                                     ; return
 09A  2D009   draw_gs_debug: OUTPUT s0[gs_major], 09[leds_hi]           ; debug display on leds
 09B  2D108                  OUTPUT s1[gs_minor], 08[leds_lo]           ; debug display on leds
 09C  25000                  RETURN                                     ; return
 09D  2009F    draw_playing: CALL 09F[draw_ship]
 09E  20107                  CALL 107[draw_aliens]
 09F  00920       draw_ship: LOAD s9[xpos], s2[gs_ballx]                ; draw bullet
 0A0  00A30                  LOAD sA[ypos], s3[gs_bally]
 0A1  20548                  CALL 548[moveto]
 0A2  00920                  LOAD s9[xpos], s2[gs_ballx]
 0A3  00A30                  LOAD sA[ypos], s3[gs_bally]
 0A4  11A03                  ADD sA[ypos], 03[gs_ball_ydim]
 0A5  2FA13                  STORE sA[ypos], 13[ramshipbullettip]
 0A6  2054B                  CALL 54B[drawto]
 0A7                         ;; Draws spaceship
 0A7  00960                  LOAD s9[xpos], s6[gs_padlx]                ; draw padl
 0A8  1190A                  ADD s9[xpos], 0A
 0A9  01AE5                  LOAD sA[ypos], E5[gs_padly]                ;; go do padl pos on screen
 0AA  20548                  CALL 548[moveto]
 0AB  19A02                  SUB sA[ypos], 02[2'd]
 0AC  2054B                  CALL 54B[drawto]
 0AD  19901                  SUB s9[xpos], 01[1'd]
 0AE  2054B                  CALL 54B[drawto]
 0AF  11A01                  ADD sA[ypos], 01[1'd]
 0B0  2054B                  CALL 54B[drawto]
 0B1  19902                  SUB s9[xpos], 02[2'd]
 0B2  2054B                  CALL 54B[drawto]
 0B3  19A03                  SUB sA[ypos], 03[3'd]
 0B4  2054B                  CALL 54B[drawto]
 0B5  19904                  SUB s9[xpos], 04[4'd]
 0B6  2054B                  CALL 54B[drawto]
 0B7  19A05                  SUB sA[ypos], 05[5'd]
 0B8  2054B                  CALL 54B[drawto]
 0B9  11901                  ADD s9[xpos], 01[1'd]
 0BA  2054B                  CALL 54B[drawto]
 0BB  11A04                  ADD sA[ypos], 04[4'd]
 0BC  2054B                  CALL 54B[drawto]
 0BD  11901                  ADD s9[xpos], 01[1'd]
 0BE  2054B                  CALL 54B[drawto]
 0BF  19A01                  SUB sA[ypos], 01[1'd]
 0C0  2054B                  CALL 54B[drawto]
 0C1  11901                  ADD s9[xpos], 01[1'd]
 0C2  2054B                  CALL 54B[drawto]
 0C3  19A06                  SUB sA[ypos], 06[6'd]
 0C4  2054B                  CALL 54B[drawto]
 0C5  11901                  ADD s9[xpos], 01[1'd]
 0C6  2054B                  CALL 54B[drawto]
 0C7  11A04                  ADD sA[ypos], 04[4'd]
 0C8  2054B                  CALL 54B[drawto]
 0C9  11901                  ADD s9[xpos], 01[1'd]
 0CA  2054B                  CALL 54B[drawto]
 0CB  19A02                  SUB sA[ypos], 02[2'd]
 0CC  2054B                  CALL 54B[drawto]
 0CD  11901                  ADD s9[xpos], 01[1'd]
 0CE  2054B                  CALL 54B[drawto]
 0CF  19A07                  SUB sA[ypos], 07[7'd]
 0D0  2054B                  CALL 54B[drawto]
 0D1  11901                  ADD s9[xpos], 01[1'd]
 0D2  2054B                  CALL 54B[drawto]
 0D3  19A03                  SUB sA[ypos], 03[3'd]
 0D4  2054B                  CALL 54B[drawto]
 0D5  11901                  ADD s9[xpos], 01[1'd]
 0D6  2054B                  CALL 54B[drawto]
 0D7  11A03                  ADD sA[ypos], 03[3'd]
 0D8  2054B                  CALL 54B[drawto]
 0D9  11901                  ADD s9[xpos], 01[1'd]
 0DA  2054B                  CALL 54B[drawto]
 0DB  11A07                  ADD sA[ypos], 07[7'd]
 0DC  2054B                  CALL 54B[drawto]
 0DD  11901                  ADD s9[xpos], 01[1'd]
 0DE  2054B                  CALL 54B[drawto]
 0DF  11A02                  ADD sA[ypos], 02[2'd]
 0E0  2054B                  CALL 54B[drawto]
 0E1  11901                  ADD s9[xpos], 01[1'd]
 0E2  2054B                  CALL 54B[drawto]
 0E3  19A04                  SUB sA[ypos], 04[4'd]
 0E4  2054B                  CALL 54B[drawto]
 0E5  11901                  ADD s9[xpos], 01[1'd]
 0E6  2054B                  CALL 54B[drawto]
 0E7  11A06                  ADD sA[ypos], 06[6'd]
 0E8  2054B                  CALL 54B[drawto]
 0E9  11901                  ADD s9[xpos], 01[1'd]
 0EA  2F915                  STORE s9[xpos], 15[ramshiphitboxx]         ; hitbox 1 start coordinates near back of ship
 0EB  2FA16                  STORE sA[ypos], 16[ramshiphitboxy]
 0EC  2054B                  CALL 54B[drawto]
 0ED  11A01                  ADD sA[ypos], 01[1'd]
 0EE  2054B                  CALL 54B[drawto]
 0EF  11901                  ADD s9[xpos], 01[1'd]
 0F0  2054B                  CALL 54B[drawto]
 0F1  19A03                  SUB sA[ypos], 03[3'd]
 0F2  2054B                  CALL 54B[drawto]
 0F3  11901                  ADD s9[xpos], 01[1'd]
 0F4  2054B                  CALL 54B[drawto]
 0F5  11A05                  ADD sA[ypos], 05[5'd]
 0F6  2054B                  CALL 54B[drawto]
 0F7  19904                  SUB s9[xpos], 04[4'd]
 0F8  2054B                  CALL 54B[drawto]
 0F9  11A03                  ADD sA[ypos], 03[3'd]
 0FA  2054B                  CALL 54B[drawto]
 0FB  19902                  SUB s9[xpos], 02[2'd]
 0FC  2054B                  CALL 54B[drawto]
 0FD  19A01                  SUB sA[ypos], 01[1'd]
 0FE  2054B                  CALL 54B[drawto]
 0FF  19901                  SUB s9[xpos], 01[1'd]
 100  2054B                  CALL 54B[drawto]
 101  11A02                  ADD sA[ypos], 02[2'd]
 102  2054B                  CALL 54B[drawto]
 103  19901                  SUB s9[xpos], 01[1'd]
 104  2054B                  CALL 54B[drawto]
 105  203B7                  CALL 3B7[checkshiphity]                    ; check if ship got hit
 106  25000                  RETURN 
 107            draw_aliens: 
 107                         ;====================================================================================================================
 107                         ;=====================  START   A L I E N    C O D E     =======================================
 107  0BF10       alien_1_1: FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 108  0DF01                  TEST sF[scratch], 01
 109  32124                  JUMP Z, 124[alien_1_2]
 10A  0190F                  LOAD s9[xpos], 0F[col1]
 10B  109E0                  ADD s9[xpos], sE[deltax]
 10C  0BA02                  FETCH sA[ypos], 02[ramalieny]
 10D  20548                  CALL 548[moveto]
 10E  1190A                  ADD s9[xpos], 0A[10'd]
 10F  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 110  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 111  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 112  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 113  2054B                  CALL 54B[drawto]
 114  19A05                  SUB sA[ypos], 05[5'd]
 115  2054B                  CALL 54B[drawto]
 116  1990A                  SUB s9[xpos], 0A[10'd]
 117  2054B                  CALL 54B[drawto]
 118  11A05                  ADD sA[ypos], 05[5'd]
 119  2054B                  CALL 54B[drawto]
 11A  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 11B  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 11C  1DF01                  COMPARE sF[scratch], 01
 11D  30335                  CALL Z, 335[remove_alien1]
 11E  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 11F  1DF01                  COMPARE sF[scratch], 01
 120  30404                  CALL Z, 404[aproj_start1]
 121  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 122  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 123  30395                  CALL Z, 395[proj_prepare]
 124  0BF10       alien_1_2: FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 125  0DF02                  TEST sF[scratch], 02
 126  32141                  JUMP Z, 141[alien_1_3]
 127  01923                  LOAD s9[xpos], 23[col2]
 128  109E0                  ADD s9[xpos], sE[deltax]
 129  0BA02                  FETCH sA[ypos], 02[ramalieny]
 12A  20548                  CALL 548[moveto]
 12B  1190A                  ADD s9[xpos], 0A[10'd]
 12C  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 12D  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 12E  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 12F  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 130  2054B                  CALL 54B[drawto]
 131  19A05                  SUB sA[ypos], 05[5'd]
 132  2054B                  CALL 54B[drawto]
 133  1990A                  SUB s9[xpos], 0A[10'd]
 134  2054B                  CALL 54B[drawto]
 135  11A05                  ADD sA[ypos], 05[5'd]
 136  2054B                  CALL 54B[drawto]
 137  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 138  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 139  1DF01                  COMPARE sF[scratch], 01
 13A  3033B                  CALL Z, 33B[remove_alien2]
 13B  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 13C  1DF02                  COMPARE sF[scratch], 02
 13D  30404                  CALL Z, 404[aproj_start1]
 13E  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 13F  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 140  30395                  CALL Z, 395[proj_prepare]
 141  0BF10       alien_1_3: FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 142  0DF04                  TEST sF[scratch], 04
 143  3215E                  JUMP Z, 15E[alien_1_4]
 144  01937                  LOAD s9[xpos], 37[col3]
 145  109E0                  ADD s9[xpos], sE[deltax]
 146  0BA02                  FETCH sA[ypos], 02[ramalieny]
 147  20548                  CALL 548[moveto]
 148  1190A                  ADD s9[xpos], 0A[10'd]
 149  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 14A  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 14B  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 14C  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 14D  2054B                  CALL 54B[drawto]
 14E  19A05                  SUB sA[ypos], 05[5'd]
 14F  2054B                  CALL 54B[drawto]
 150  1990A                  SUB s9[xpos], 0A[10'd]
 151  2054B                  CALL 54B[drawto]
 152  11A05                  ADD sA[ypos], 05[5'd]
 153  2054B                  CALL 54B[drawto]
 154  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 155  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 156  1DF01                  COMPARE sF[scratch], 01
 157  30341                  CALL Z, 341[remove_alien3]
 158  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 159  1DF03                  COMPARE sF[scratch], 03
 15A  30404                  CALL Z, 404[aproj_start1]
 15B  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 15C  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 15D  30395                  CALL Z, 395[proj_prepare]
 15E  0BF10       alien_1_4: FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 15F  0DF08                  TEST sF[scratch], 08
 160  3217B                  JUMP Z, 17B[alien_1_5]
 161  0194B                  LOAD s9[xpos], 4B[col4]
 162  109E0                  ADD s9[xpos], sE[deltax]
 163  0BA02                  FETCH sA[ypos], 02[ramalieny]
 164  20548                  CALL 548[moveto]
 165  1190A                  ADD s9[xpos], 0A[10'd]
 166  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 167  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 168  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 169  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 16A  2054B                  CALL 54B[drawto]
 16B  19A05                  SUB sA[ypos], 05[5'd]
 16C  2054B                  CALL 54B[drawto]
 16D  1990A                  SUB s9[xpos], 0A[10'd]
 16E  2054B                  CALL 54B[drawto]
 16F  11A05                  ADD sA[ypos], 05[5'd]
 170  2054B                  CALL 54B[drawto]
 171  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 172  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 173  1DF01                  COMPARE sF[scratch], 01
 174  30347                  CALL Z, 347[remove_alien4]
 175  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 176  1DF04                  COMPARE sF[scratch], 04
 177  30404                  CALL Z, 404[aproj_start1]
 178  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 179  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 17A  30395                  CALL Z, 395[proj_prepare]
 17B  0BF10       alien_1_5: FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 17C  0DF10                  TEST sF[scratch], 10
 17D  32198                  JUMP Z, 198[alien_1_6]
 17E  0195F                  LOAD s9[xpos], 5F[col5]
 17F  109E0                  ADD s9[xpos], sE[deltax]
 180  0BA02                  FETCH sA[ypos], 02[ramalieny]
 181  20548                  CALL 548[moveto]
 182  1190A                  ADD s9[xpos], 0A[10'd]
 183  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 184  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 185  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 186  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 187  2054B                  CALL 54B[drawto]
 188  19A05                  SUB sA[ypos], 05[5'd]
 189  2054B                  CALL 54B[drawto]
 18A  1990A                  SUB s9[xpos], 0A[10'd]
 18B  2054B                  CALL 54B[drawto]
 18C  11A05                  ADD sA[ypos], 05[5'd]
 18D  2054B                  CALL 54B[drawto]
 18E  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 18F  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 190  1DF01                  COMPARE sF[scratch], 01
 191  3034D                  CALL Z, 34D[remove_alien5]
 192  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 193  1DF05                  COMPARE sF[scratch], 05
 194  30404                  CALL Z, 404[aproj_start1]
 195  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 196  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 197  30395                  CALL Z, 395[proj_prepare]
 198  0BF10       alien_1_6: FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 199  0DF20                  TEST sF[scratch], 20
 19A  321B5                  JUMP Z, 1B5[alien_1_7]
 19B  01973                  LOAD s9[xpos], 73[col6]
 19C  109E0                  ADD s9[xpos], sE[deltax]
 19D  0BA02                  FETCH sA[ypos], 02[ramalieny]
 19E  20548                  CALL 548[moveto]
 19F  1190A                  ADD s9[xpos], 0A[10'd]
 1A0  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 1A1  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 1A2  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 1A3  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 1A4  2054B                  CALL 54B[drawto]
 1A5  19A05                  SUB sA[ypos], 05[5'd]
 1A6  2054B                  CALL 54B[drawto]
 1A7  1990A                  SUB s9[xpos], 0A[10'd]
 1A8  2054B                  CALL 54B[drawto]
 1A9  11A05                  ADD sA[ypos], 05[5'd]
 1AA  2054B                  CALL 54B[drawto]
 1AB  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 1AC  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 1AD  1DF01                  COMPARE sF[scratch], 01
 1AE  30353                  CALL Z, 353[remove_alien6]
 1AF  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 1B0  1DF06                  COMPARE sF[scratch], 06
 1B1  30404                  CALL Z, 404[aproj_start1]
 1B2  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 1B3  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 1B4  30395                  CALL Z, 395[proj_prepare]
 1B5  0BF10       alien_1_7: FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 1B6  0DF40                  TEST sF[scratch], 40
 1B7  321D2                  JUMP Z, 1D2[alien_1_8]
 1B8  01987                  LOAD s9[xpos], 87[col7]
 1B9  109E0                  ADD s9[xpos], sE[deltax]
 1BA  0BA02                  FETCH sA[ypos], 02[ramalieny]
 1BB  20548                  CALL 548[moveto]
 1BC  1190A                  ADD s9[xpos], 0A[10'd]
 1BD  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 1BE  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 1BF  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 1C0  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 1C1  2054B                  CALL 54B[drawto]
 1C2  19A05                  SUB sA[ypos], 05[5'd]
 1C3  2054B                  CALL 54B[drawto]
 1C4  1990A                  SUB s9[xpos], 0A[10'd]
 1C5  2054B                  CALL 54B[drawto]
 1C6  11A05                  ADD sA[ypos], 05[5'd]
 1C7  2054B                  CALL 54B[drawto]
 1C8  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 1C9  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 1CA  1DF01                  COMPARE sF[scratch], 01
 1CB  30359                  CALL Z, 359[remove_alien7]
 1CC  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 1CD  1DF07                  COMPARE sF[scratch], 07
 1CE  30404                  CALL Z, 404[aproj_start1]
 1CF  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 1D0  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 1D1  30395                  CALL Z, 395[proj_prepare]
 1D2              alien_1_8: 
 1D2  0199B                  LOAD s9[xpos], 9B[col8]
 1D3  109E0                  ADD s9[xpos], sE[deltax]
 1D4  0BA02                  FETCH sA[ypos], 02[ramalieny]
 1D5  0BF10                  FETCH sF[scratch], 10[ramalienlives1]      ; check if alien is alive (if it is not then skip it)
 1D6  0DF80                  TEST sF[scratch], 80
 1D7  321EF                  JUMP Z, 1EF[end_row_1]
 1D8  20548                  CALL 548[moveto]
 1D9  1190A                  ADD s9[xpos], 0A[10'd]
 1DA  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 1DB  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 1DC  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 1DD  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 1DE  2054B                  CALL 54B[drawto]
 1DF  19A05                  SUB sA[ypos], 05[5'd]
 1E0  2054B                  CALL 54B[drawto]
 1E1  1990A                  SUB s9[xpos], 0A[10'd]
 1E2  2054B                  CALL 54B[drawto]
 1E3  11A05                  ADD sA[ypos], 05[5'd]
 1E4  2054B                  CALL 54B[drawto]
 1E5  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 1E6  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 1E7  1DF01                  COMPARE sF[scratch], 01
 1E8  3035F                  CALL Z, 35F[remove_alien8]
 1E9  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 1EA  1DF08                  COMPARE sF[scratch], 08
 1EB  30404                  CALL Z, 404[aproj_start1]
 1EC  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 1ED  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 1EE  30395                  CALL Z, 395[proj_prepare]
 1EF  1DACD       end_row_1: COMPARE sA[ypos], CD                       ; check if first row of aliens reached bottom
 1F0  303F1                  CALL Z, 3F1[gameover]
 1F1  0BF18       alien_2_1: FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 1F2  0DF01                  TEST sF[scratch], 01
 1F3  3220F                  JUMP Z, 20F[alien_2_2]
 1F4  0190F                  LOAD s9[xpos], 0F[col1]
 1F5  109E0                  ADD s9[xpos], sE[deltax]
 1F6  0BA02                  FETCH sA[ypos], 02[ramalieny]
 1F7  11A0F                  ADD sA[ypos], 0F[15'd]
 1F8  20548                  CALL 548[moveto]
 1F9  1190A                  ADD s9[xpos], 0A[10'd]
 1FA  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 1FB  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 1FC  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 1FD  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 1FE  2054B                  CALL 54B[drawto]
 1FF  19A05                  SUB sA[ypos], 05[5'd]
 200  2054B                  CALL 54B[drawto]
 201  1990A                  SUB s9[xpos], 0A[10'd]
 202  2054B                  CALL 54B[drawto]
 203  11A05                  ADD sA[ypos], 05[5'd]
 204  2054B                  CALL 54B[drawto]
 205  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 206  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 207  1DF01                  COMPARE sF[scratch], 01
 208  30365                  CALL Z, 365[remove_alien9]
 209  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 20A  1DF09                  COMPARE sF[scratch], 09
 20B  30404                  CALL Z, 404[aproj_start1]
 20C  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 20D  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 20E  30395                  CALL Z, 395[proj_prepare]
 20F  0BF18       alien_2_2: FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 210  0DF02                  TEST sF[scratch], 02
 211  3222D                  JUMP Z, 22D[alien_2_3]
 212  01923                  LOAD s9[xpos], 23[col2]
 213  109E0                  ADD s9[xpos], sE[deltax]
 214  0BA02                  FETCH sA[ypos], 02[ramalieny]
 215  11A0F                  ADD sA[ypos], 0F[15'd]
 216  20548                  CALL 548[moveto]
 217  1190A                  ADD s9[xpos], 0A[10'd]
 218  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 219  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 21A  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 21B  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 21C  2054B                  CALL 54B[drawto]
 21D  19A05                  SUB sA[ypos], 05[5'd]
 21E  2054B                  CALL 54B[drawto]
 21F  1990A                  SUB s9[xpos], 0A[10'd]
 220  2054B                  CALL 54B[drawto]
 221  11A05                  ADD sA[ypos], 05[5'd]
 222  2054B                  CALL 54B[drawto]
 223  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 224  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 225  1DF01                  COMPARE sF[scratch], 01
 226  3036B                  CALL Z, 36B[remove_alien10]
 227  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 228  1DF0A                  COMPARE sF[scratch], 0A
 229  30404                  CALL Z, 404[aproj_start1]
 22A  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 22B  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 22C  30395                  CALL Z, 395[proj_prepare]
 22D  0BF18       alien_2_3: FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 22E  0DF04                  TEST sF[scratch], 04
 22F  3224B                  JUMP Z, 24B[alien_2_4]
 230  01937                  LOAD s9[xpos], 37[col3]
 231  109E0                  ADD s9[xpos], sE[deltax]
 232  0BA02                  FETCH sA[ypos], 02[ramalieny]
 233  11A0F                  ADD sA[ypos], 0F[15'd]
 234  20548                  CALL 548[moveto]
 235  1190A                  ADD s9[xpos], 0A[10'd]
 236  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 237  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 238  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 239  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 23A  2054B                  CALL 54B[drawto]
 23B  19A05                  SUB sA[ypos], 05[5'd]
 23C  2054B                  CALL 54B[drawto]
 23D  1990A                  SUB s9[xpos], 0A[10'd]
 23E  2054B                  CALL 54B[drawto]
 23F  11A05                  ADD sA[ypos], 05[5'd]
 240  2054B                  CALL 54B[drawto]
 241  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 242  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 243  1DF01                  COMPARE sF[scratch], 01
 244  30371                  CALL Z, 371[remove_alien11]
 245  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 246  1DF0B                  COMPARE sF[scratch], 0B
 247  30404                  CALL Z, 404[aproj_start1]
 248  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 249  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 24A  30395                  CALL Z, 395[proj_prepare]
 24B  0BF18       alien_2_4: FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 24C  0DF08                  TEST sF[scratch], 08
 24D  32269                  JUMP Z, 269[alien_2_5]
 24E  0194B                  LOAD s9[xpos], 4B[col4]
 24F  109E0                  ADD s9[xpos], sE[deltax]
 250  0BA02                  FETCH sA[ypos], 02[ramalieny]
 251  11A0F                  ADD sA[ypos], 0F[15'd]
 252  20548                  CALL 548[moveto]
 253  1190A                  ADD s9[xpos], 0A[10'd]
 254  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 255  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 256  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 257  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 258  2054B                  CALL 54B[drawto]
 259  19A05                  SUB sA[ypos], 05[5'd]
 25A  2054B                  CALL 54B[drawto]
 25B  1990A                  SUB s9[xpos], 0A[10'd]
 25C  2054B                  CALL 54B[drawto]
 25D  11A05                  ADD sA[ypos], 05[5'd]
 25E  2054B                  CALL 54B[drawto]
 25F  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 260  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 261  1DF01                  COMPARE sF[scratch], 01
 262  30377                  CALL Z, 377[remove_alien12]
 263  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 264  1DF0C                  COMPARE sF[scratch], 0C
 265  30404                  CALL Z, 404[aproj_start1]
 266  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 267  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 268  30395                  CALL Z, 395[proj_prepare]
 269  0BF18       alien_2_5: FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 26A  0DF10                  TEST sF[scratch], 10
 26B  32287                  JUMP Z, 287[alien_2_6]
 26C  0195F                  LOAD s9[xpos], 5F[col5]
 26D  109E0                  ADD s9[xpos], sE[deltax]
 26E  0BA02                  FETCH sA[ypos], 02[ramalieny]
 26F  11A0F                  ADD sA[ypos], 0F[15'd]
 270  20548                  CALL 548[moveto]
 271  1190A                  ADD s9[xpos], 0A[10'd]
 272  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 273  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 274  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 275  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 276  2054B                  CALL 54B[drawto]
 277  19A05                  SUB sA[ypos], 05[5'd]
 278  2054B                  CALL 54B[drawto]
 279  1990A                  SUB s9[xpos], 0A[10'd]
 27A  2054B                  CALL 54B[drawto]
 27B  11A05                  ADD sA[ypos], 05[5'd]
 27C  2054B                  CALL 54B[drawto]
 27D  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 27E  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 27F  1DF01                  COMPARE sF[scratch], 01
 280  3037D                  CALL Z, 37D[remove_alien13]
 281  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 282  1DF0D                  COMPARE sF[scratch], 0D
 283  30404                  CALL Z, 404[aproj_start1]
 284  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 285  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 286  30395                  CALL Z, 395[proj_prepare]
 287  0BF18       alien_2_6: FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 288  0DF20                  TEST sF[scratch], 20
 289  322A5                  JUMP Z, 2A5[alien_2_7]
 28A  01973                  LOAD s9[xpos], 73[col6]
 28B  109E0                  ADD s9[xpos], sE[deltax]
 28C  0BA02                  FETCH sA[ypos], 02[ramalieny]
 28D  11A0F                  ADD sA[ypos], 0F[15'd]
 28E  20548                  CALL 548[moveto]
 28F  1190A                  ADD s9[xpos], 0A[10'd]
 290  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 291  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 292  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 293  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 294  2054B                  CALL 54B[drawto]
 295  19A05                  SUB sA[ypos], 05[5'd]
 296  2054B                  CALL 54B[drawto]
 297  1990A                  SUB s9[xpos], 0A[10'd]
 298  2054B                  CALL 54B[drawto]
 299  11A05                  ADD sA[ypos], 05[5'd]
 29A  2054B                  CALL 54B[drawto]
 29B  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 29C  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 29D  1DF01                  COMPARE sF[scratch], 01
 29E  30383                  CALL Z, 383[remove_alien14]
 29F  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 2A0  1DF0E                  COMPARE sF[scratch], 0E
 2A1  30404                  CALL Z, 404[aproj_start1]
 2A2  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 2A3  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 2A4  30395                  CALL Z, 395[proj_prepare]
 2A5  0BF18       alien_2_7: FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 2A6  0DF40                  TEST sF[scratch], 40
 2A7  322C3                  JUMP Z, 2C3[alien_2_8]
 2A8  01987                  LOAD s9[xpos], 87[col7]
 2A9  109E0                  ADD s9[xpos], sE[deltax]
 2AA  0BA02                  FETCH sA[ypos], 02[ramalieny]
 2AB  11A0F                  ADD sA[ypos], 0F[15'd]
 2AC  20548                  CALL 548[moveto]
 2AD  1190A                  ADD s9[xpos], 0A[10'd]
 2AE  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 2AF  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 2B0  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 2B1  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 2B2  2054B                  CALL 54B[drawto]
 2B3  19A05                  SUB sA[ypos], 05[5'd]
 2B4  2054B                  CALL 54B[drawto]
 2B5  1990A                  SUB s9[xpos], 0A[10'd]
 2B6  2054B                  CALL 54B[drawto]
 2B7  11A05                  ADD sA[ypos], 05[5'd]
 2B8  2054B                  CALL 54B[drawto]
 2B9  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 2BA  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 2BB  1DF01                  COMPARE sF[scratch], 01
 2BC  30389                  CALL Z, 389[remove_alien15]
 2BD  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 2BE  1DF0F                  COMPARE sF[scratch], 0F
 2BF  30404                  CALL Z, 404[aproj_start1]
 2C0  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 2C1  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 2C2  30395                  CALL Z, 395[proj_prepare]
 2C3              alien_2_8: 
 2C3  0199B                  LOAD s9[xpos], 9B[col8]
 2C4  109E0                  ADD s9[xpos], sE[deltax]
 2C5  0BA02                  FETCH sA[ypos], 02[ramalieny]
 2C6  11A0F                  ADD sA[ypos], 0F[15'd]
 2C7  0BF18                  FETCH sF[scratch], 18[ramalienlives2]      ; check if alien is alive (if it is not then skip it)
 2C8  0DF80                  TEST sF[scratch], 80
 2C9  322E1                  JUMP Z, 2E1[end_row_2]
 2CA  20548                  CALL 548[moveto]
 2CB  1190A                  ADD s9[xpos], 0A[10'd]
 2CC  2F911                  STORE s9[xpos], 11[ramhitboxx]             ; store hitbox x value
 2CD  2FA12                  STORE sA[ypos], 12[ramhitboxy]             ; store hitbox y value
 2CE  2F904                  STORE s9[xpos], 04[ramprojx1]              ; projectile x coordinate
 2CF  2FA06                  STORE sA[ypos], 06[ramprojy1]              ; projectile y coordinate
 2D0  2054B                  CALL 54B[drawto]
 2D1  19A05                  SUB sA[ypos], 05[5'd]
 2D2  2054B                  CALL 54B[drawto]
 2D3  1990A                  SUB s9[xpos], 0A[10'd]
 2D4  2054B                  CALL 54B[drawto]
 2D5  11A05                  ADD sA[ypos], 05[5'd]
 2D6  2054B                  CALL 54B[drawto]
 2D7  202FC                  CALL 2FC[check_hity]                       ; check if alien was hit
 2D8  0BF14                  FETCH sF[scratch], 14[ramalienhit]         ; remove from alien lives if hit
 2D9  1DF01                  COMPARE sF[scratch], 01
 2DA  3038F                  CALL Z, 38F[remove_alien16]
 2DB  0BF08                  FETCH sF[scratch], 08[ramrandom]           ; check if chosen to shoot projetile, if chosen then start projectile
 2DC  1DF10                  COMPARE sF[scratch], 10
 2DD  30404                  CALL Z, 404[aproj_start1]
 2DE  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 2DF  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 2E0  30395                  CALL Z, 395[proj_prepare]
 2E1  1DACD       end_row_2: COMPARE sA[ypos], CD                       ; check if second row of aliens reached bottom
 2E2  303F1                  CALL Z, 3F1[gameover]
 2E3                         ;====================================================================================================================
 2E3                         ;==========================================  END   A L I E N    C O D E     =========================================
 2E3  0BF03   end_of_aliens: FETCH sF[scratch], 03[ramwait]             ; wait counter for updating aliens
 2E4  1DF04                  COMPARE sF[scratch], 04[waittime]
 2E5  3041B                  CALL Z, 41B[shift]
 2E6  0BF03                  FETCH sF[scratch], 03[ramwait]
 2E7  11F01                  ADD sF[scratch], 01                        ; add to wait counter
 2E8  2FF03                  STORE sF[scratch], 03[ramwait]
 2E9  0BF0B                  FETCH sF[scratch], 0B[ramprojwait]         ; generate new random number and shoot another projectile
 2EA  1DF50                  COMPARE sF[scratch], 50
 2EB  3039B                  CALL Z, 39B[shoot_again]
 2EC  0BF0B                  FETCH sF[scratch], 0B[ramprojwait]
 2ED  11F01                  ADD sF[scratch], 01
 2EE  2FF0B                  STORE sF[scratch], 0B[ramprojwait]
 2EF  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]    ; increment counter for projectiles
 2F0  11F01                  ADD sF[scratch], 01[one]
 2F1  2FF0C                  STORE sF[scratch], 0C[ramprojdeltawait]
 2F2  0BF10                  FETCH sF[scratch], 10[ramalienlives1]      ; check if all aliens are dead, end game if they are
 2F3  2DF0B                  OUTPUT sF[scratch], 0B[qssd_hi]
 2F4  1DF00                  COMPARE sF[scratch], 00
 2F5  35000                  RETURN NZ
 2F6  0BF18                  FETCH sF[scratch], 18[ramalienlives2]
 2F7  2DF0A                  OUTPUT sF[scratch], 0A[qssd_lo]
 2F8  1DF00                  COMPARE sF[scratch], 00
 2F9  35000                  RETURN NZ
 2FA  203F1                  CALL 3F1[gameover]
 2FB  25000                  RETURN 
 2FC  0BF12      check_hity: FETCH sF[scratch], 12[ramhitboxy]
 2FD  1CF30                  COMPARE sF[scratch], s3[gs_bally]
 2FE  3030C                  CALL Z, 30C[check_hitx]
 2FF  19F01                  SUB sF[scratch], 01
 300  1CF30                  COMPARE sF[scratch], s3[gs_bally]
 301  3030C                  CALL Z, 30C[check_hitx]
 302  19F01                  SUB sF[scratch], 01
 303  1CF30                  COMPARE sF[scratch], s3[gs_bally]
 304  3030C                  CALL Z, 30C[check_hitx]
 305  19F01                  SUB sF[scratch], 01
 306  1CF30                  COMPARE sF[scratch], s3[gs_bally]
 307  3030C                  CALL Z, 30C[check_hitx]
 308  19F01                  SUB sF[scratch], 01
 309  1CF30                  COMPARE sF[scratch], s3[gs_bally]
 30A  3030C                  CALL Z, 30C[check_hitx]
 30B  25000                  RETURN 
 30C  0BF11      check_hitx: FETCH sF[scratch], 11[ramhitboxx]
 30D  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 30E  30331                  CALL Z, 331[alien_hit]
 30F  19F01                  SUB sF[scratch], 01
 310  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 311  30331                  CALL Z, 331[alien_hit]
 312  19F01                  SUB sF[scratch], 01
 313  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 314  30331                  CALL Z, 331[alien_hit]
 315  19F01                  SUB sF[scratch], 01
 316  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 317  30331                  CALL Z, 331[alien_hit]
 318  19F01                  SUB sF[scratch], 01
 319  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 31A  30331                  CALL Z, 331[alien_hit]
 31B  19F01                  SUB sF[scratch], 01
 31C  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 31D  30331                  CALL Z, 331[alien_hit]
 31E  19F01                  SUB sF[scratch], 01
 31F  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 320  30331                  CALL Z, 331[alien_hit]
 321  19F01                  SUB sF[scratch], 01
 322  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 323  30331                  CALL Z, 331[alien_hit]
 324  19F01                  SUB sF[scratch], 01
 325  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 326  30331                  CALL Z, 331[alien_hit]
 327  19F01                  SUB sF[scratch], 01
 328  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 329  30331                  CALL Z, 331[alien_hit]
 32A  19F01                  SUB sF[scratch], 01
 32B  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 32C  30331                  CALL Z, 331[alien_hit]
 32D  19F01                  SUB sF[scratch], 01
 32E  1CF20                  COMPARE sF[scratch], s2[gs_ballx]
 32F  30331                  CALL Z, 331[alien_hit]
 330  25000                  RETURN 
 331  01F01       alien_hit: LOAD sF[scratch], 01
 332  2FF14                  STORE sF[scratch], 14[ramalienhit]
 333  2007A                  CALL 07A[reset_bullet]
 334  25000                  RETURN 
 335  0BF10   remove_alien1: FETCH sF[scratch], 10[ramalienlives1]      ; remove first row alien lives
 336  07F01                  XOR sF[scratch], 01
 337  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 338  01F00                  LOAD sF[scratch], 00[zero]
 339  2FF14                  STORE sF[scratch], 14[ramalienhit]
 33A  25000                  RETURN 
 33B  0BF10   remove_alien2: FETCH sF[scratch], 10[ramalienlives1]
 33C  07F02                  XOR sF[scratch], 02
 33D  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 33E  01F00                  LOAD sF[scratch], 00[zero]
 33F  2FF14                  STORE sF[scratch], 14[ramalienhit]
 340  25000                  RETURN 
 341  0BF10   remove_alien3: FETCH sF[scratch], 10[ramalienlives1]
 342  07F04                  XOR sF[scratch], 04
 343  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 344  01F00                  LOAD sF[scratch], 00[zero]
 345  2FF14                  STORE sF[scratch], 14[ramalienhit]
 346  25000                  RETURN 
 347  0BF10   remove_alien4: FETCH sF[scratch], 10[ramalienlives1]
 348  07F08                  XOR sF[scratch], 08
 349  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 34A  01F00                  LOAD sF[scratch], 00[zero]
 34B  2FF14                  STORE sF[scratch], 14[ramalienhit]
 34C  25000                  RETURN 
 34D  0BF10   remove_alien5: FETCH sF[scratch], 10[ramalienlives1]
 34E  07F10                  XOR sF[scratch], 10
 34F  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 350  01F00                  LOAD sF[scratch], 00[zero]
 351  2FF14                  STORE sF[scratch], 14[ramalienhit]
 352  25000                  RETURN 
 353  0BF10   remove_alien6: FETCH sF[scratch], 10[ramalienlives1]
 354  07F20                  XOR sF[scratch], 20
 355  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 356  01F00                  LOAD sF[scratch], 00[zero]
 357  2FF14                  STORE sF[scratch], 14[ramalienhit]
 358  25000                  RETURN 
 359  0BF10   remove_alien7: FETCH sF[scratch], 10[ramalienlives1]
 35A  07F40                  XOR sF[scratch], 40
 35B  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 35C  01F00                  LOAD sF[scratch], 00[zero]
 35D  2FF14                  STORE sF[scratch], 14[ramalienhit]
 35E  25000                  RETURN 
 35F  0BF10   remove_alien8: FETCH sF[scratch], 10[ramalienlives1]
 360  07F80                  XOR sF[scratch], 80
 361  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 362  01F00                  LOAD sF[scratch], 00[zero]
 363  2FF14                  STORE sF[scratch], 14[ramalienhit]
 364  25000                  RETURN 
 365  0BF18   remove_alien9: FETCH sF[scratch], 18[ramalienlives2]      ; remove second row alien lives
 366  07F01                  XOR sF[scratch], 01
 367  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 368  01F00                  LOAD sF[scratch], 00[zero]
 369  2FF14                  STORE sF[scratch], 14[ramalienhit]
 36A  25000                  RETURN 
 36B  0BF18  remove_alien10: FETCH sF[scratch], 18[ramalienlives2]
 36C  07F02                  XOR sF[scratch], 02
 36D  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 36E  01F00                  LOAD sF[scratch], 00[zero]
 36F  2FF14                  STORE sF[scratch], 14[ramalienhit]
 370  25000                  RETURN 
 371  0BF18  remove_alien11: FETCH sF[scratch], 18[ramalienlives2]
 372  07F04                  XOR sF[scratch], 04
 373  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 374  01F00                  LOAD sF[scratch], 00[zero]
 375  2FF14                  STORE sF[scratch], 14[ramalienhit]
 376  25000                  RETURN 
 377  0BF18  remove_alien12: FETCH sF[scratch], 18[ramalienlives2]
 378  07F08                  XOR sF[scratch], 08
 379  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 37A  01F00                  LOAD sF[scratch], 00[zero]
 37B  2FF14                  STORE sF[scratch], 14[ramalienhit]
 37C  25000                  RETURN 
 37D  0BF18  remove_alien13: FETCH sF[scratch], 18[ramalienlives2]
 37E  07F10                  XOR sF[scratch], 10
 37F  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 380  01F00                  LOAD sF[scratch], 00[zero]
 381  2FF14                  STORE sF[scratch], 14[ramalienhit]
 382  25000                  RETURN 
 383  0BF18  remove_alien14: FETCH sF[scratch], 18[ramalienlives2]
 384  07F20                  XOR sF[scratch], 20
 385  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 386  01F00                  LOAD sF[scratch], 00[zero]
 387  2FF14                  STORE sF[scratch], 14[ramalienhit]
 388  25000                  RETURN 
 389  0BF18  remove_alien15: FETCH sF[scratch], 18[ramalienlives2]
 38A  07F40                  XOR sF[scratch], 40
 38B  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 38C  01F00                  LOAD sF[scratch], 00[zero]
 38D  2FF14                  STORE sF[scratch], 14[ramalienhit]
 38E  25000                  RETURN 
 38F  0BF18  remove_alien16: FETCH sF[scratch], 18[ramalienlives2]
 390  07F80                  XOR sF[scratch], 80
 391  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 392  01F00                  LOAD sF[scratch], 00[zero]
 393  2FF14                  STORE sF[scratch], 14[ramalienhit]
 394  25000                  RETURN 
 395  0BF05    proj_prepare: FETCH sF[scratch], 05[ramprojx2]
 396  1DF00                  COMPARE sF[scratch], 00[zero]
 397  343A4                  CALL NZ, 3A4[proj_check1]
 398  01F00                  LOAD sF[scratch], 00[zero]
 399  2FF0C                  STORE sF[scratch], 0C[ramprojdeltawait]
 39A  25000                  RETURN 
 39B  09F07     shoot_again: INPUT sF[scratch], 07[prng]
 39C  14F0E                  SR0 sF[scratch]
 39D  14F0E                  SR0 sF[scratch]
 39E  14F0E                  SR0 sF[scratch]
 39F  14F0E                  SR0 sF[scratch]
 3A0  2FF08                  STORE sF[scratch], 08[ramrandom]
 3A1  01F00                  LOAD sF[scratch], 00
 3A2  2FF0B                  STORE sF[scratch], 0B[ramprojwait]
 3A3  25000                  RETURN 
 3A4  0BF07     proj_check1: FETCH sF[scratch], 07[ramprojy2]           ; check if it hits bottom border lines
 3A5  1DFFA                  COMPARE sF[scratch], FA[bottom_border1]
 3A6  343A8                  CALL NZ, 3A8[proj_check2]
 3A7  25000                  RETURN 
 3A8  1DFFB     proj_check2: COMPARE sF[scratch], FB[bottom_border2]
 3A9  343AB                  CALL NZ, 3AB[proj_check3]
 3AA  25000                  RETURN 
 3AB  1DFFC     proj_check3: COMPARE sF[scratch], FC[bottom_border3]
 3AC  343AE                  CALL NZ, 3AE[proj_check4]
 3AD  25000                  RETURN 
 3AE  1DFFD     proj_check4: COMPARE sF[scratch], FD[bottom_border4]
 3AF  343B1                  CALL NZ, 3B1[proj_check5]
 3B0  25000                  RETURN 
 3B1  1DFFE     proj_check5: COMPARE sF[scratch], FE[bottom_border5]
 3B2  343B4                  CALL NZ, 3B4[proj_check6]
 3B3  25000                  RETURN 
 3B4  1DFFF     proj_check6: COMPARE sF[scratch], FF[bottom_border6]
 3B5  3440C                  CALL NZ, 40C[alien_shoot]
 3B6  25000                  RETURN 
 3B7  0BA16   checkshiphity: FETCH sA[ypos], 16[ramshiphitboxy]
 3B8  0BF07                  FETCH sF[scratch], 07[ramprojy2]
 3B9  11F05                  ADD sF[scratch], 05
 3BA  1CAF0                  COMPARE sA[ypos], sF[scratch]
 3BB  303CC                  CALL Z, 3CC[checkshiphitx]
 3BC  19A01                  SUB sA[ypos], 01
 3BD  1CAF0                  COMPARE sA[ypos], sF[scratch]
 3BE  303CC                  CALL Z, 3CC[checkshiphitx]
 3BF  19A01                  SUB sA[ypos], 01
 3C0  1CAF0                  COMPARE sA[ypos], sF[scratch]
 3C1  303CC                  CALL Z, 3CC[checkshiphitx]
 3C2  19A01                  SUB sA[ypos], 01
 3C3  1CAF0                  COMPARE sA[ypos], sF[scratch]
 3C4  303CC                  CALL Z, 3CC[checkshiphitx]
 3C5  19A01                  SUB sA[ypos], 01
 3C6  1CAF0                  COMPARE sA[ypos], sF[scratch]
 3C7  303CC                  CALL Z, 3CC[checkshiphitx]
 3C8  19A01                  SUB sA[ypos], 01
 3C9  1CAF0                  COMPARE sA[ypos], sF[scratch]
 3CA  303CC                  CALL Z, 3CC[checkshiphitx]
 3CB  25000                  RETURN 
 3CC  0B915   checkshiphitx: FETCH s9[xpos], 15[ramshiphitboxx]
 3CD  0BF05                  FETCH sF[scratch], 05[ramprojx2]
 3CE  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3CF  19901                  SUB s9[xpos], 01
 3D0  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3D1  303F1                  CALL Z, 3F1[gameover]
 3D2  19901                  SUB s9[xpos], 01
 3D3  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3D4  303F1                  CALL Z, 3F1[gameover]
 3D5  19901                  SUB s9[xpos], 01
 3D6  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3D7  303F1                  CALL Z, 3F1[gameover]
 3D8  19901                  SUB s9[xpos], 01
 3D9  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3DA  303F1                  CALL Z, 3F1[gameover]
 3DB  19901                  SUB s9[xpos], 01
 3DC  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3DD  303F1                  CALL Z, 3F1[gameover]
 3DE  19901                  SUB s9[xpos], 01
 3DF  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3E0  303F1                  CALL Z, 3F1[gameover]
 3E1  19901                  SUB s9[xpos], 01
 3E2  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3E3  303F1                  CALL Z, 3F1[gameover]
 3E4  19901                  SUB s9[xpos], 01
 3E5  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3E6  303F1                  CALL Z, 3F1[gameover]
 3E7  19901                  SUB s9[xpos], 01
 3E8  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3E9  303F1                  CALL Z, 3F1[gameover]
 3EA  19901                  SUB s9[xpos], 01
 3EB  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3EC  303F1                  CALL Z, 3F1[gameover]
 3ED  19901                  SUB s9[xpos], 01
 3EE  1C9F0                  COMPARE s9[xpos], sF[scratch]
 3EF  303F1                  CALL Z, 3F1[gameover]
 3F0  25000                  RETURN 
 3F1  01003        gameover: LOAD s0[gs_major], 03[gs_major_gameend]
 3F2  01100                  LOAD s1[gs_minor], 00[gs_minor_begins]
 3F3  203F5                  CALL 3F5[reset]                            ; reset all needed values
 3F4  25000                  RETURN 
 3F5  01F19           reset: LOAD sF[scratch], 19[row1]                 ; reset row coordinates
 3F6  2FF02                  STORE sF[scratch], 02
 3F7  01F01                  LOAD sF[scratch], 01
 3F8  2FF17                  STORE sF[scratch], 17[ramshiplife]         ; restore player ship life
 3F9  01E00                  LOAD sE[deltax], 00                        ; reset alien coordinates
 3FA  01FFF                  LOAD sF[scratch], FF                       ; restore alien lives
 3FB  2FF10                  STORE sF[scratch], 10[ramalienlives1]
 3FC  2FF18                  STORE sF[scratch], 18[ramalienlives2]
 3FD  2007A                  CALL 07A[reset_bullet]
 3FE  01F00                  LOAD sF[scratch], 00
 3FF  2FF05                  STORE sF[scratch], 05[ramprojx2]
 400  2FF07                  STORE sF[scratch], 07[ramprojy2]
 401  2FF0B                  STORE sF[scratch], 0B[ramprojwait]
 402  2FF0A                  STORE sF[scratch], 0A[ramdownen]
 403  25000                  RETURN 
 404  0BF04    aproj_start1: FETCH sF[scratch], 04[ramprojx1]
 405  19F02                  SUB sF[scratch], 02
 406  2FF05                  STORE sF[scratch], 05[ramprojx2]
 407  0BF06                  FETCH sF[scratch], 06[ramprojy1]
 408  2FF07                  STORE sF[scratch], 07[ramprojy2]
 409  01F00                  LOAD sF[scratch], 00
 40A  2FF08                  STORE sF[scratch], 08[ramrandom]
 40B  25000                  RETURN 
 40C  0BB05     alien_shoot: FETCH sB[alien_projx], 05[ramprojx2]
 40D  0BC07                  FETCH sC[alien_projy], 07[ramprojy2]
 40E  2053B                  CALL 53B[aprojmoveto]
 40F  0BB05                  FETCH sB[alien_projx], 05[ramprojx2]
 410  0BC07                  FETCH sC[alien_projy], 07[ramprojy2]
 411  11C05                  ADD sC[alien_projy], 05
 412  2053E                  CALL 53E[aprojdrawto]
 413  0BF0C                  FETCH sF[scratch], 0C[ramprojdeltawait]
 414  1DF01                  COMPARE sF[scratch], 01[projwaittime]
 415  30417                  CALL Z, 417[projdeltay]
 416  25000                  RETURN 
 417  0BF07      projdeltay: FETCH sF[scratch], 07[ramprojy2]
 418  11F06                  ADD sF[scratch], 06
 419  2FF07                  STORE sF[scratch], 07[ramprojy2]
 41A  25000                  RETURN 
 41B  0BF0A           shift: FETCH sF[scratch], 0A[ramdownen]
 41C  1DF01                  COMPARE sF[scratch], 01[one]
 41D  30428                  CALL Z, 428[left_down]
 41E  1D9E6                  COMPARE s9[xpos], E6
 41F  3042E                  CALL Z, 42E[shift_down]
 420  1D99B                  COMPARE s9[xpos], 9B[col8]
 421  30443                  CALL Z, 443[alien_right]
 422  1D9E6                  COMPARE s9[xpos], E6
 423  3044D                  CALL Z, 44D[alien_left]
 424  2042B                  CALL 42B[shift_sideways]
 425  01F00                  LOAD sF[scratch], 00
 426  2FF03                  STORE sF[scratch], 03[ramwait]
 427  25000                  RETURN 
 428  1D99B       left_down: COMPARE s9[xpos], 9B[col8]
 429  3042E                  CALL Z, 42E[shift_down]
 42A  25000                  RETURN 
 42B  0BF01  shift_sideways: FETCH sF[scratch], 01[ramshiftx]
 42C  10EF0                  ADD sE[deltax], sF[scratch]
 42D  25000                  RETURN 
 42E  0BF02      shift_down: FETCH sF[scratch], 02[ramalieny]
 42F  11F01                  ADD sF[scratch], 01
 430  2FF02                  STORE sF[scratch], 02[ramalieny]
 431  0BF0E                  FETCH sF[scratch], 0E[ramdeltaycount]
 432  11F01                  ADD sF[scratch], 01
 433  2FF0E                  STORE sF[scratch], 0E[ramdeltaycount]
 434  1DF0A                  COMPARE sF[scratch], 0A
 435  3043A                  CALL Z, 43A[deltax_en]
 436  3443D                  CALL NZ, 43D[deltax_dis]
 437  01F01                  LOAD sF[scratch], 01
 438  2FF0A                  STORE sF[scratch], 0A[ramdownen]
 439  25000                  RETURN 
 43A  01F01       deltax_en: LOAD sF[scratch], 01[one]
 43B  2FF0D                  STORE sF[scratch], 0D[ramdeltaxen]
 43C  25000                  RETURN 
 43D  01F00      deltax_dis: LOAD sF[scratch], 00[zero]
 43E  2FF0D                  STORE sF[scratch], 0D[ramdeltaxen]
 43F  25000                  RETURN 
 440  01F00  neutral_deltax: LOAD sF[scratch], 00
 441  2FF01                  STORE sF[scratch], 01[ramshiftx]
 442  25000                  RETURN 
 443  0BF0D     alien_right: FETCH sF[scratch], 0D[ramdeltaxen]
 444  1DF01                  COMPARE sF[scratch], 01[deltaxen]
 445  34440                  CALL NZ, 440[neutral_deltax]
 446  30448                  CALL Z, 448[pos_deltax]
 447  25000                  RETURN 
 448  01F01      pos_deltax: LOAD sF[scratch], 01
 449  2FF01                  STORE sF[scratch], 01[ramshiftx]
 44A  01F00                  LOAD sF[scratch], 00[zero]
 44B  2FF0E                  STORE sF[scratch], 0E[ramdeltaycount]
 44C  25000                  RETURN 
 44D  0BF0D      alien_left: FETCH sF[scratch], 0D[ramdeltaxen]
 44E  1DF01                  COMPARE sF[scratch], 01[deltaxen]
 44F  34440                  CALL NZ, 440[neutral_deltax]
 450  30452                  CALL Z, 452[neg_deltax]
 451  25000                  RETURN 
 452  01FFF      neg_deltax: LOAD sF[scratch], FF
 453  2FF01                  STORE sF[scratch], 01[ramshiftx]
 454  01F00                  LOAD sF[scratch], 00[zero]
 455  2FF0E                  STORE sF[scratch], 0E[ramdeltaycount]
 456  25000                  RETURN 
 457  01944    draw_attrone: LOAD s9[xpos], 44[68'd]                    ; draw letter S
 458  01A44                  LOAD sA[ypos], 44[68'd]
 459  20548                  CALL 548[moveto]
 45A  01933                  LOAD s9[xpos], 33[51'd]
 45B  01A4A                  LOAD sA[ypos], 4A[74'd]
 45C  2054B                  CALL 54B[drawto]
 45D  01944                  LOAD s9[xpos], 44[68'd]
 45E  01A58                  LOAD sA[ypos], 58[88'd]
 45F  2054B                  CALL 54B[drawto]
 460  01933                  LOAD s9[xpos], 33[51'd]
 461  01A66                  LOAD sA[ypos], 66[102'd]
 462  2054B                  CALL 54B[drawto]
 463  01955                  LOAD s9[xpos], 55[85'd]                    ; draw letter P
 464  01A44                  LOAD sA[ypos], 44[68'd]
 465  20548                  CALL 548[moveto]
 466  01966                  LOAD s9[xpos], 66[102'd]
 467  01A4C                  LOAD sA[ypos], 4C[76'd]
 468  2054B                  CALL 54B[drawto]
 469  01955                  LOAD s9[xpos], 55[85'd]
 46A  01A55                  LOAD sA[ypos], 55[85'd]
 46B  2054B                  CALL 54B[drawto]
 46C  01955                  LOAD s9[xpos], 55[85'd]
 46D  01A66                  LOAD sA[ypos], 66[102'd]
 46E  2054B                  CALL 54B[drawto]
 46F  01955                  LOAD s9[xpos], 55[85'd]
 470  01A44                  LOAD sA[ypos], 44[68'd]
 471  2054B                  CALL 54B[drawto]
 472  01973                  LOAD s9[xpos], 73[115'd]                   ; draw letter A
 473  01A66                  LOAD sA[ypos], 66[102'd]
 474  20548                  CALL 548[moveto]
 475  0197F                  LOAD s9[xpos], 7F[127'd]
 476  01A44                  LOAD sA[ypos], 44[68'd]
 477  2054B                  CALL 54B[drawto]
 478  0198A                  LOAD s9[xpos], 8A[138'd]
 479  01A66                  LOAD sA[ypos], 66[102'd]
 47A  2054B                  CALL 54B[drawto]
 47B  01988                  LOAD s9[xpos], 88[136'd]
 47C  01A55                  LOAD sA[ypos], 55[85'd]
 47D  20548                  CALL 548[moveto]
 47E  01977                  LOAD s9[xpos], 77[119'd]
 47F  01A55                  LOAD sA[ypos], 55[85'd]
 480  2054B                  CALL 54B[drawto]
 481  019AA                  LOAD s9[xpos], AA[170'd]                   ; draw letter C
 482  01A44                  LOAD sA[ypos], 44[68'd]
 483  20548                  CALL 548[moveto]
 484  01999                  LOAD s9[xpos], 99[153'd]
 485  01A55                  LOAD sA[ypos], 55[85'd]
 486  2054B                  CALL 54B[drawto]
 487  019AA                  LOAD s9[xpos], AA[170'd]
 488  01A66                  LOAD sA[ypos], 66[102'd]
 489  2054B                  CALL 54B[drawto]
 48A  019CC                  LOAD s9[xpos], CC[204'd]                   ; draw letter E
 48B  01A44                  LOAD sA[ypos], 44[68'd]
 48C  20548                  CALL 548[moveto]
 48D  019BB                  LOAD s9[xpos], BB[187'd]
 48E  01A44                  LOAD sA[ypos], 44[68'd]
 48F  2054B                  CALL 54B[drawto]
 490  019BB                  LOAD s9[xpos], BB[187'd]
 491  01A66                  LOAD sA[ypos], 66[102'd]
 492  2054B                  CALL 54B[drawto]
 493  019CC                  LOAD s9[xpos], CC[204'd]
 494  01A66                  LOAD sA[ypos], 66[102'd]
 495  2054B                  CALL 54B[drawto]
 496  019C3                  LOAD s9[xpos], C3[195'd]
 497  01A55                  LOAD sA[ypos], 55[85'd]
 498  20548                  CALL 548[moveto]
 499  019BB                  LOAD s9[xpos], BB[187'd]
 49A  01A55                  LOAD sA[ypos], 55[85'd]
 49B  2054B                  CALL 54B[drawto]
 49C  25000                  RETURN 
 49D  01922    draw_attrtwo: LOAD s9[xpos], 22[34'd]                    ; draw letter I
 49E  01A88                  LOAD sA[ypos], 88[136'd]
 49F  20548                  CALL 548[moveto]
 4A0  01922                  LOAD s9[xpos], 22[34'd]
 4A1  01AAA                  LOAD sA[ypos], AA[170'd]
 4A2  2054B                  CALL 54B[drawto]
 4A3  01933                  LOAD s9[xpos], 33[51'd]                    ; draw letter N
 4A4  01AAA                  LOAD sA[ypos], AA[170'd]
 4A5  20548                  CALL 548[moveto]
 4A6  01933                  LOAD s9[xpos], 33[51'd]
 4A7  01A88                  LOAD sA[ypos], 88[136'd]
 4A8  2054B                  CALL 54B[drawto]
 4A9  01944                  LOAD s9[xpos], 44[68'd]
 4AA  01AAA                  LOAD sA[ypos], AA[170'd]
 4AB  2054B                  CALL 54B[drawto]
 4AC  01944                  LOAD s9[xpos], 44[68'd]
 4AD  01A88                  LOAD sA[ypos], 88[136'd]
 4AE  2054B                  CALL 54B[drawto]
 4AF  0194C                  LOAD s9[xpos], 4C[76'd]                    ; draw letter V
 4B0  01A88                  LOAD sA[ypos], 88[136'd]
 4B1  20548                  CALL 548[moveto]
 4B2  01955                  LOAD s9[xpos], 55[85'd]
 4B3  01AAA                  LOAD sA[ypos], AA[170'd]
 4B4  2054B                  CALL 54B[drawto]
 4B5  0195D                  LOAD s9[xpos], 5D[93'd]
 4B6  01A88                  LOAD sA[ypos], 88[136'd]
 4B7  2054B                  CALL 54B[drawto]
 4B8  01966                  LOAD s9[xpos], 66[102'd]                   ;draw letter A
 4B9  01AAA                  LOAD sA[ypos], AA[170'd]
 4BA  20548                  CALL 548[moveto]
 4BB  0196E                  LOAD s9[xpos], 6E[110'd]
 4BC  01A88                  LOAD sA[ypos], 88[136'd]
 4BD  2054B                  CALL 54B[drawto]
 4BE  01977                  LOAD s9[xpos], 77[119'd]
 4BF  01AAA                  LOAD sA[ypos], AA[170'd]
 4C0  2054B                  CALL 54B[drawto]
 4C1  01971                  LOAD s9[xpos], 71[113'd]
 4C2  01A99                  LOAD sA[ypos], 99[153'd]
 4C3  20548                  CALL 548[moveto]
 4C4  0196C                  LOAD s9[xpos], 6C[108'd]
 4C5  01A99                  LOAD sA[ypos], 99[153'd]
 4C6  2054B                  CALL 54B[drawto]
 4C7  01988                  LOAD s9[xpos], 88[136'd]                   ; draw letter D
 4C8  01A88                  LOAD sA[ypos], 88[136'd]
 4C9  20548                  CALL 548[moveto]
 4CA  01988                  LOAD s9[xpos], 88[136'd]
 4CB  01AAA                  LOAD sA[ypos], AA[170'd]
 4CC  2054B                  CALL 54B[drawto]
 4CD  01999                  LOAD s9[xpos], 99[153'd]
 4CE  01A99                  LOAD sA[ypos], 99[153'd]
 4CF  2054B                  CALL 54B[drawto]
 4D0  01988                  LOAD s9[xpos], 88[136'd]
 4D1  01A88                  LOAD sA[ypos], 88[136'd]
 4D2  2054B                  CALL 54B[drawto]
 4D3  019B4                  LOAD s9[xpos], B4[180'd]                   ; draw letter E
 4D4  01A88                  LOAD sA[ypos], 88[136'd]
 4D5  20548                  CALL 548[moveto]
 4D6  019A4                  LOAD s9[xpos], A4[164'd]
 4D7  01A88                  LOAD sA[ypos], 88[136'd]
 4D8  2054B                  CALL 54B[drawto]
 4D9  019A4                  LOAD s9[xpos], A4[164'd]
 4DA  01AAA                  LOAD sA[ypos], AA[170'd]
 4DB  2054B                  CALL 54B[drawto]
 4DC  019B4                  LOAD s9[xpos], B4[180'd]
 4DD  01AAA                  LOAD sA[ypos], AA[170'd]
 4DE  2054B                  CALL 54B[drawto]
 4DF  019AF                  LOAD s9[xpos], AF[175'd]
 4E0  01A99                  LOAD sA[ypos], 99[153'd]
 4E1  20548                  CALL 548[moveto]
 4E2  019A4                  LOAD s9[xpos], A4[164'd]
 4E3  01A99                  LOAD sA[ypos], 99[153'd]
 4E4  2054B                  CALL 54B[drawto]
 4E5  019BB                  LOAD s9[xpos], BB[187'd]                   ; draw letter R
 4E6  01AAA                  LOAD sA[ypos], AA[170'd]
 4E7  20548                  CALL 548[moveto]
 4E8  019BB                  LOAD s9[xpos], BB[187'd]
 4E9  01A88                  LOAD sA[ypos], 88[136'd]
 4EA  2054B                  CALL 54B[drawto]
 4EB  019CC                  LOAD s9[xpos], CC[204'd]
 4EC  01A94                  LOAD sA[ypos], 94[148'd]
 4ED  2054B                  CALL 54B[drawto]
 4EE  019BB                  LOAD s9[xpos], BB[187'd]
 4EF  01A9B                  LOAD sA[ypos], 9B[155'd]
 4F0  2054B                  CALL 54B[drawto]
 4F1  019CC                  LOAD s9[xpos], CC[204'd]
 4F2  01AAA                  LOAD sA[ypos], AA[170'd]
 4F3  2054B                  CALL 54B[drawto]
 4F4  019E5                  LOAD s9[xpos], E5[229'd]                   ; draw letter S
 4F5  01A88                  LOAD sA[ypos], 88[136'd]
 4F6  20548                  CALL 548[moveto]
 4F7  019DD                  LOAD s9[xpos], DD[221'd]
 4F8  01A95                  LOAD sA[ypos], 95[149'd]
 4F9  2054B                  CALL 54B[drawto]
 4FA  019EE                  LOAD s9[xpos], EE[238'd]
 4FB  01A9E                  LOAD sA[ypos], 9E[158'd]
 4FC  2054B                  CALL 54B[drawto]
 4FD  019DD                  LOAD s9[xpos], DD[221'd]
 4FE  01AAA                  LOAD sA[ypos], AA[170'd]
 4FF  2054B                  CALL 54B[drawto]
 500  25000                  RETURN 
 501  01948    draw_gameend: LOAD s9[xpos], 48                          ; draw letter d
 502  01A50                  LOAD sA[ypos], 50
 503  20548                  CALL 548[moveto]
 504  01948                  LOAD s9[xpos], 48
 505  01A90                  LOAD sA[ypos], 90
 506  2054B                  CALL 54B[drawto]
 507  01928                  LOAD s9[xpos], 28
 508  01A90                  LOAD sA[ypos], 90
 509  2054B                  CALL 54B[drawto]
 50A  01928                  LOAD s9[xpos], 28
 50B  01A70                  LOAD sA[ypos], 70
 50C  2054B                  CALL 54B[drawto]
 50D  01948                  LOAD s9[xpos], 48
 50E  01A70                  LOAD sA[ypos], 70
 50F  2054B                  CALL 54B[drawto]
 510  01958                  LOAD s9[xpos], 58                          ; draw letter o
 511  01A70                  LOAD sA[ypos], 70
 512  20548                  CALL 548[moveto]
 513  01958                  LOAD s9[xpos], 58
 514  01A90                  LOAD sA[ypos], 90
 515  2054B                  CALL 54B[drawto]
 516  01978                  LOAD s9[xpos], 78
 517  01A90                  LOAD sA[ypos], 90
 518  2054B                  CALL 54B[drawto]
 519  01978                  LOAD s9[xpos], 78
 51A  01A70                  LOAD sA[ypos], 70
 51B  2054B                  CALL 54B[drawto]
 51C  01958                  LOAD s9[xpos], 58
 51D  01A70                  LOAD sA[ypos], 70
 51E  2054B                  CALL 54B[drawto]
 51F  01988                  LOAD s9[xpos], 88                          ; draw letter n
 520  01A90                  LOAD sA[ypos], 90
 521  20548                  CALL 548[moveto]
 522  01988                  LOAD s9[xpos], 88
 523  01A70                  LOAD sA[ypos], 70
 524  2054B                  CALL 54B[drawto]
 525  019A8                  LOAD s9[xpos], A8
 526  01A70                  LOAD sA[ypos], 70
 527  2054B                  CALL 54B[drawto]
 528  019A8                  LOAD s9[xpos], A8
 529  01A90                  LOAD sA[ypos], 90
 52A  2054B                  CALL 54B[drawto]
 52B  019D8                  LOAD s9[xpos], D8                          ; draw letter e
 52C  01A90                  LOAD sA[ypos], 90
 52D  20548                  CALL 548[moveto]
 52E  019B8                  LOAD s9[xpos], B8
 52F  01A90                  LOAD sA[ypos], 90
 530  2054B                  CALL 54B[drawto]
 531  019B8                  LOAD s9[xpos], B8
 532  01A70                  LOAD sA[ypos], 70
 533  2054B                  CALL 54B[drawto]
 534  019D8                  LOAD s9[xpos], D8
 535  01A70                  LOAD sA[ypos], 70
 536  2054B                  CALL 54B[drawto]
 537  019B8                  LOAD s9[xpos], B8
 538  01A90                  LOAD sA[ypos], 90
 539  2054B                  CALL 54B[drawto]
 53A  25000                  RETURN 
 53B                         ;;============================================================================
 53B                         ;; Subroutine: moveto and drawto
 53B                         ;; The moveto routine uses the global variables xpos and ypos, and the drawto
 53B                         ;; routine uses these global variables as well as the endpoint coordinates in
 53B                         ;; the display controller.  Moveto simply copies xpos and ypos into endpoint
 53B                         ;; coordinates in the display controller, it does not draw anything.  The
 53B                         ;; drawto routine copies endpoint coordinates to startpoint coordinates (does
 53B                         ;; not matter if the endpoint was from an actual draw, or simply an update
 53B                         ;; by moveto) and then copies xpos and ypos into endpoint coordinates, then
 53B                         ;; starts a linedraw.
 53B                         ;;============================================================================
 53B  2DB02     aprojmoveto: OUTPUT sB[alien_projx], 02[endx]           ; copy global to hardware
 53C  2DC03                  OUTPUT sC[alien_projy], 03[endy]           ; copy global to hardware
 53D  25000                  RETURN 
 53E  09F02     aprojdrawto: INPUT sF[scratch], 02[endx]                ; read hardware
 53F  2DF00                  OUTPUT sF[scratch], 00[stax]               ; write hardware
 540  2DB02                  OUTPUT sB[alien_projx], 02[endx]           ; copy global to hardware
 541  09F03                  INPUT sF[scratch], 03[endy]                ; read hardware
 542  2DF01                  OUTPUT sF[scratch], 01[stay]               ; write hardware
 543  2DC03                  OUTPUT sC[alien_projy], 03[endy]           ; copy global to hardware
 544  01F01                  LOAD sF[scratch], 01[busy_go]              ; prepare the command
 545  2DF04                  OUTPUT sF[scratch], 04[busy]               ; send the command
 546  20025                  CALL 025[hw_init_wait]                     ; wait line draw done
 547  25000                  RETURN 
 548  2D902          moveto: OUTPUT s9[xpos], 02[endx]                  ; copy global to hardware
 549  2DA03                  OUTPUT sA[ypos], 03[endy]                  ; copy global to hardware
 54A  25000                  RETURN                                     ; return
 54B  09F02          drawto: INPUT sF[scratch], 02[endx]                ; read hardware
 54C  2DF00                  OUTPUT sF[scratch], 00[stax]               ; write hardware
 54D  2D902                  OUTPUT s9[xpos], 02[endx]                  ; copy global to hardware
 54E  09F03                  INPUT sF[scratch], 03[endy]                ; read hardware
 54F  2DF01                  OUTPUT sF[scratch], 01[stay]               ; write hardware
 550  2DA03                  OUTPUT sA[ypos], 03[endy]                  ; copy global to hardware
 551  01F01                  LOAD sF[scratch], 01[busy_go]              ; prepare the command
 552  2DF04                  OUTPUT sF[scratch], 04[busy]               ; send the command
 553  20025                  CALL 025[hw_init_wait]                     ; wait line draw done
 554  25000                  RETURN                                     ; return
 555                         ;;============================================================================
 555                         ;; Interrupt - Vector.
 555                         ;;============================================================================
 7FF                         ADDRESS 7FF                                ; must be located here
 7FF  22017      isr_vector: JUMP 017[isr]                              ; always jump to isr
 800                         ;;============================================================================
 800                         ;;
 800                         ;;============================================================================



List of PSM files that have been assembled

C:\Users\Justin\Documents\4th School Year\Fall 2016 Semester\EE178\Vivado Projects\EE178_Lab_8\software\software.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   21'd         
 timestamp_minutes 05'd         
 timestamp_seconds 06'd         
 datestamp_year    16'd         
 datestamp_month   12'd         
 datestamp_day     12'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 stax              00           software.psm
 stay              01           software.psm
 endx              02           software.psm
 endy              03           software.psm
 busy              04           software.psm
 beam              05           software.psm
 mode              06           software.psm
 prng              07           software.psm
 leds_lo           08           software.psm
 leds_hi           09           software.psm
 qssd_lo           0A           software.psm
 qssd_hi           0B           software.psm
 qssd_dp           0C           software.psm
 switches_lo       0D           software.psm
 switches_hi       0E           software.psm
 buttons           0F           software.psm
 busy_go           01           software.psm
 beam_hi           0F           software.psm
 beam_md           07           software.psm
 beam_lo           03           software.psm
 mode_hld          00           software.psm
 mode_clr          01           software.psm
 mode_lin          02           software.psm
 mode_exp          03           software.psm
 buttons_ct        10           software.psm
 buttons_up        08           software.psm
 buttons_dn        04           software.psm
 buttons_lf        02           software.psm
 buttons_rt        01           software.psm
 gs_major_attrone  00           software.psm
 gs_major_attrtwo  01           software.psm
 gs_major_playing  02           software.psm
 gs_major_gameend  03           software.psm
 gs_minor_begins   00           software.psm
 gs_minor_twosec   78           software.psm
 gs_minor_onesec   3C           software.psm
 gs_minor_getrdy   1E           software.psm
 gs_ball_ydim      03           software.psm
 gs_ball_speed     02           software.psm
 gs_padly          E5           software.psm
 gs_padl_xdim      16           software.psm
 gs_padl_ydim      08           software.psm
 gs_padl_xdim1     06           software.psm
 gs_padl_xdimmid   0A           software.psm
 gs_padl_xdim2     10           software.psm
 gs_padl_ydim1     03           software.psm
 gs_padlyfull      20           software.psm
 gs_padl_speed     04           software.psm
 col1              15'd         software.psm
 col2              35'd         software.psm
 col3              55'd         software.psm
 col4              75'd         software.psm
 col5              95'd         software.psm
 col6              115'd        software.psm
 col7              135'd        software.psm
 col8              155'd        software.psm
 col9              7D           software.psm
 col10             8C           software.psm
 col11             96           software.psm
 col12             A5           software.psm
 col13             AF           software.psm
 col14             BE           software.psm
 ramshiftx         01           software.psm
 ramalieny         02           software.psm
 ramwait           03           software.psm
 ramprojx1         04           software.psm
 ramprojx2         05           software.psm
 ramprojy1         06           software.psm
 ramprojy2         07           software.psm
 ramrandom         08           software.psm
 ramenable         09           software.psm
 ramdownen         0A           software.psm
 ramprojwait       0B           software.psm
 ramprojdeltawait  0C           software.psm
 ramdeltaxen       0D           software.psm
 ramdeltaycount    0E           software.psm
 ramalienx         0F           software.psm
 ramalienlives1    10           software.psm
 ramhitboxx        11           software.psm
 ramhitboxy        12           software.psm
 ramshipbullettip  13           software.psm
 ramalienhit       14           software.psm
 ramshiphitboxx    15           software.psm
 ramshiphitboxy    16           software.psm
 ramshiplife       17           software.psm
 ramalienlives2    18           software.psm
 ramalienlives3    19           software.psm
 row1              19           software.psm
 deltarow2         0F           software.psm
 waittime          04           software.psm
 projwaittime      01           software.psm
 bottom_border1    FA           software.psm
 bottom_border2    FB           software.psm
 bottom_border3    FC           software.psm
 bottom_border4    FD           software.psm
 bottom_border5    FE           software.psm
 bottom_border6    FF           software.psm
 deltaxen          01           software.psm
 minusone          FF           software.psm
 minusmax          80           software.psm
 plusmax           7F           software.psm
 zero              00           software.psm
 one               01           software.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.51"        
 datestamp$        "12 Dec 2016"  
 timestamp$        "21:05:06"     



List of line labels

   Label            Addr  Source PSM File

 * boot             000   software.psm
   main             016   software.psm
   isr              017   software.psm
   hw_init          01B   software.psm
   hw_init_wait     025   software.psm
   gs_init          029   software.psm
   user_input       02C   software.psm
   calc_next_gs     02E   software.psm
   calc_attrone     037   software.psm
   calc_attrtwo     03D   software.psm
   calc_playing     043   software.psm
   keep_playing     046   software.psm
   upd_padl         047   software.psm
   upd_padl_lt      053   software.psm
   upd_padl_rt      057   software.psm
   upd_ball         05E   software.psm
   fired            06F   software.psm
 * skip_hit         075   software.psm
   move_bullet      076   software.psm
   reset_bullet     07A   software.psm
   calc_gameend     080   software.psm
   goto_attrone     084   software.psm
   goto_attrtwo     087   software.psm
   goto_playing     08A   software.psm
 * ballddone        08C   software.psm
   goto_gameend     08D   software.psm
   draw_gs          090   software.psm
   draw_gs_debug    09A   software.psm
   draw_playing     09D   software.psm
   draw_ship        09F   software.psm
   draw_aliens      107   software.psm
 * alien_1_1        107   software.psm
   alien_1_2        124   software.psm
   alien_1_3        141   software.psm
   alien_1_4        15E   software.psm
   alien_1_5        17B   software.psm
   alien_1_6        198   software.psm
   alien_1_7        1B5   software.psm
   alien_1_8        1D2   software.psm
   end_row_1        1EF   software.psm
 * alien_2_1        1F1   software.psm
   alien_2_2        20F   software.psm
   alien_2_3        22D   software.psm
   alien_2_4        24B   software.psm
   alien_2_5        269   software.psm
   alien_2_6        287   software.psm
   alien_2_7        2A5   software.psm
   alien_2_8        2C3   software.psm
   end_row_2        2E1   software.psm
 * end_of_aliens    2E3   software.psm
   check_hity       2FC   software.psm
   check_hitx       30C   software.psm
   alien_hit        331   software.psm
   remove_alien1    335   software.psm
   remove_alien2    33B   software.psm
   remove_alien3    341   software.psm
   remove_alien4    347   software.psm
   remove_alien5    34D   software.psm
   remove_alien6    353   software.psm
   remove_alien7    359   software.psm
   remove_alien8    35F   software.psm
   remove_alien9    365   software.psm
   remove_alien10   36B   software.psm
   remove_alien11   371   software.psm
   remove_alien12   377   software.psm
   remove_alien13   37D   software.psm
   remove_alien14   383   software.psm
   remove_alien15   389   software.psm
   remove_alien16   38F   software.psm
   proj_prepare     395   software.psm
   shoot_again      39B   software.psm
   proj_check1      3A4   software.psm
   proj_check2      3A8   software.psm
   proj_check3      3AB   software.psm
   proj_check4      3AE   software.psm
   proj_check5      3B1   software.psm
   proj_check6      3B4   software.psm
   checkshiphity    3B7   software.psm
   checkshiphitx    3CC   software.psm
   gameover         3F1   software.psm
   reset            3F5   software.psm
   aproj_start1     404   software.psm
   alien_shoot      40C   software.psm
   projdeltay       417   software.psm
   shift            41B   software.psm
   left_down        428   software.psm
   shift_sideways   42B   software.psm
   shift_down       42E   software.psm
   deltax_en        43A   software.psm
   deltax_dis       43D   software.psm
   neutral_deltax   440   software.psm
   alien_right      443   software.psm
   pos_deltax       448   software.psm
   alien_left       44D   software.psm
   neg_deltax       452   software.psm
   draw_attrone     457   software.psm
   draw_attrtwo     49D   software.psm
   draw_gameend     501   software.psm
   aprojmoveto      53B   software.psm
   aprojdrawto      53E   software.psm
   moveto           548   software.psm
   drawto           54B   software.psm
 * isr_vector       7FF   software.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD            241
 STAR              -

 AND               -
 OR                -
 XOR              16

 ADD             100
 ADDCY             2
 SUB              88
 SUBCY             3

 TEST             23
 TESTCY            -
 COMPARE         124
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             7
 OUTPUT           25
 OUTPUTK           -

 STORE           125
 FETCH           125

 DISABLE           -
 ENABLE            1
 RETURNI           1

 JUMP             38
 JUMP@             -
 CALL            348
 CALL@             -
 RETURN           79
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
