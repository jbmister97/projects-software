
EE_138_Lab_1_Part1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000102f0  2**0
                  CONTENTS
  2 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002000  20000020  20000020  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000102f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002fba  00000000  00000000  00010371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043e  00000000  00000000  0001332b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000009c  00000000  00000000  00013769  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000058  00000000  00000000  00013805  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  0001385d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000007d9  00000000  00000000  00013895  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000010cc  00000000  00000000  0001406e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005aba6  00000000  00000000  0001513a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000000b4  00000000  00000000  0006fce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002020 	.word	0x20002020
   4:	00000109 	.word	0x00000109
   8:	00000105 	.word	0x00000105
   c:	00000105 	.word	0x00000105
	...
  2c:	00000105 	.word	0x00000105
	...
  38:	00000105 	.word	0x00000105
  3c:	00000105 	.word	0x00000105
  40:	00000105 	.word	0x00000105
  44:	00000105 	.word	0x00000105
  48:	00000105 	.word	0x00000105
  4c:	00000105 	.word	0x00000105
  50:	00000105 	.word	0x00000105
  54:	00000105 	.word	0x00000105
  58:	00000105 	.word	0x00000105
  5c:	00000105 	.word	0x00000105
  60:	00000105 	.word	0x00000105
  64:	00000105 	.word	0x00000105
  68:	00000105 	.word	0x00000105
  6c:	00000105 	.word	0x00000105
  70:	00000105 	.word	0x00000105
  74:	00000105 	.word	0x00000105
  78:	00000105 	.word	0x00000105
  7c:	00000105 	.word	0x00000105
  80:	00000105 	.word	0x00000105
  84:	00000105 	.word	0x00000105
  88:	00000105 	.word	0x00000105
  8c:	00000105 	.word	0x00000105
  90:	00000105 	.word	0x00000105
  94:	00000105 	.word	0x00000105
  98:	00000105 	.word	0x00000105
  9c:	00000105 	.word	0x00000105
  a0:	00000105 	.word	0x00000105

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	20000000 	.word	0x20000000
  c4:	00000000 	.word	0x00000000
  c8:	000002f0 	.word	0x000002f0

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000004 	.word	0x20000004
  f8:	000002f0 	.word	0x000002f0
  fc:	000002f0 	.word	0x000002f0
 100:	00000000 	.word	0x00000000

00000104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 104:	e7fe      	b.n	104 <Dummy_Handler>
 106:	46c0      	nop			; (mov r8, r8)

00000108 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 108:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 10a:	4b1d      	ldr	r3, [pc, #116]	; (180 <Reset_Handler+0x78>)
 10c:	4a1d      	ldr	r2, [pc, #116]	; (184 <Reset_Handler+0x7c>)
 10e:	429a      	cmp	r2, r3
 110:	d003      	beq.n	11a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 112:	4b1d      	ldr	r3, [pc, #116]	; (188 <Reset_Handler+0x80>)
 114:	4a1a      	ldr	r2, [pc, #104]	; (180 <Reset_Handler+0x78>)
 116:	429a      	cmp	r2, r3
 118:	d304      	bcc.n	124 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 11a:	4b1c      	ldr	r3, [pc, #112]	; (18c <Reset_Handler+0x84>)
 11c:	4a1c      	ldr	r2, [pc, #112]	; (190 <Reset_Handler+0x88>)
 11e:	429a      	cmp	r2, r3
 120:	d310      	bcc.n	144 <Reset_Handler+0x3c>
 122:	e01e      	b.n	162 <Reset_Handler+0x5a>
 124:	4a1b      	ldr	r2, [pc, #108]	; (194 <Reset_Handler+0x8c>)
 126:	4b18      	ldr	r3, [pc, #96]	; (188 <Reset_Handler+0x80>)
 128:	3303      	adds	r3, #3
 12a:	1a9b      	subs	r3, r3, r2
 12c:	089b      	lsrs	r3, r3, #2
 12e:	3301      	adds	r3, #1
 130:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 132:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 134:	4812      	ldr	r0, [pc, #72]	; (180 <Reset_Handler+0x78>)
 136:	4913      	ldr	r1, [pc, #76]	; (184 <Reset_Handler+0x7c>)
 138:	588c      	ldr	r4, [r1, r2]
 13a:	5084      	str	r4, [r0, r2]
 13c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 13e:	429a      	cmp	r2, r3
 140:	d1fa      	bne.n	138 <Reset_Handler+0x30>
 142:	e7ea      	b.n	11a <Reset_Handler+0x12>
 144:	4a14      	ldr	r2, [pc, #80]	; (198 <Reset_Handler+0x90>)
 146:	4b11      	ldr	r3, [pc, #68]	; (18c <Reset_Handler+0x84>)
 148:	3303      	adds	r3, #3
 14a:	1a9b      	subs	r3, r3, r2
 14c:	089b      	lsrs	r3, r3, #2
 14e:	3301      	adds	r3, #1
 150:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 152:	2200      	movs	r2, #0
                *pDest++ = 0;
 154:	480e      	ldr	r0, [pc, #56]	; (190 <Reset_Handler+0x88>)
 156:	2100      	movs	r1, #0
 158:	1814      	adds	r4, r2, r0
 15a:	6021      	str	r1, [r4, #0]
 15c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 15e:	429a      	cmp	r2, r3
 160:	d1fa      	bne.n	158 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 162:	4a0e      	ldr	r2, [pc, #56]	; (19c <Reset_Handler+0x94>)
 164:	21ff      	movs	r1, #255	; 0xff
 166:	4b0e      	ldr	r3, [pc, #56]	; (1a0 <Reset_Handler+0x98>)
 168:	438b      	bics	r3, r1
 16a:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 16c:	4a0d      	ldr	r2, [pc, #52]	; (1a4 <Reset_Handler+0x9c>)
 16e:	6851      	ldr	r1, [r2, #4]
 170:	2380      	movs	r3, #128	; 0x80
 172:	430b      	orrs	r3, r1
 174:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 176:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <Reset_Handler+0xa0>)
 178:	4798      	blx	r3

        /* Branch to main function */
        main();
 17a:	4b0c      	ldr	r3, [pc, #48]	; (1ac <Reset_Handler+0xa4>)
 17c:	4798      	blx	r3
 17e:	e7fe      	b.n	17e <Reset_Handler+0x76>
 180:	20000000 	.word	0x20000000
 184:	000002f0 	.word	0x000002f0
 188:	20000000 	.word	0x20000000
 18c:	20000020 	.word	0x20000020
 190:	20000000 	.word	0x20000000
 194:	20000004 	.word	0x20000004
 198:	20000004 	.word	0x20000004
 19c:	e000ed00 	.word	0xe000ed00
 1a0:	00000000 	.word	0x00000000
 1a4:	41004000 	.word	0x41004000
 1a8:	00000285 	.word	0x00000285
 1ac:	00000249 	.word	0x00000249

000001b0 <wait>:
}

//time delay function
void wait(int t)
{
	count = 0;
 1b0:	4a07      	ldr	r2, [pc, #28]	; (1d0 <wait+0x20>)
 1b2:	2300      	movs	r3, #0
 1b4:	6013      	str	r3, [r2, #0]
    while (count < t*1000)
 1b6:	23fa      	movs	r3, #250	; 0xfa
 1b8:	009b      	lsls	r3, r3, #2
 1ba:	4358      	muls	r0, r3
 1bc:	6813      	ldr	r3, [r2, #0]
 1be:	4298      	cmp	r0, r3
 1c0:	dd05      	ble.n	1ce <wait+0x1e>
	{
		count++;
 1c2:	6813      	ldr	r3, [r2, #0]
 1c4:	3301      	adds	r3, #1
 1c6:	6013      	str	r3, [r2, #0]

//time delay function
void wait(int t)
{
	count = 0;
    while (count < t*1000)
 1c8:	6813      	ldr	r3, [r2, #0]
 1ca:	4283      	cmp	r3, r0
 1cc:	dbf9      	blt.n	1c2 <wait+0x12>
	{
		count++;
	}
}
 1ce:	4770      	bx	lr
 1d0:	2000001c 	.word	0x2000001c

000001d4 <Simple_Clk_Init>:
void Simple_Clk_Init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 1d4:	4b16      	ldr	r3, [pc, #88]	; (230 <Simple_Clk_Init+0x5c>)
 1d6:	22c2      	movs	r2, #194	; 0xc2
 1d8:	00d2      	lsls	r2, r2, #3
 1da:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 1dc:	4915      	ldr	r1, [pc, #84]	; (234 <Simple_Clk_Init+0x60>)
 1de:	684a      	ldr	r2, [r1, #4]
 1e0:	201e      	movs	r0, #30
 1e2:	4382      	bics	r2, r0
 1e4:	604a      	str	r2, [r1, #4]
			SYSCTRL_INTFLAG_DFLLRDY;
			
	system_flash_set_waitstates(0);  		//Clock_flash wait state =0

	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;      	/* for OSC8M initialization  */
 1e6:	6a1a      	ldr	r2, [r3, #32]

	temp.bit.PRESC    = 0;    			// no divide, i.e., set clock=8Mhz  (see page 170)
	temp.bit.ONDEMAND = 1;    			// On-demand is true
	temp.bit.RUNSTDBY = 0;    			// Standby is false
	
	SYSCTRL->OSC8M = temp;
 1e8:	2140      	movs	r1, #64	; 0x40
 1ea:	438a      	bics	r2, r1
 1ec:	3140      	adds	r1, #64	; 0x40
 1ee:	430a      	orrs	r2, r1
 1f0:	4911      	ldr	r1, [pc, #68]	; (238 <Simple_Clk_Init+0x64>)
 1f2:	400a      	ands	r2, r1
 1f4:	621a      	str	r2, [r3, #32]

	SYSCTRL->OSC8M.reg |= 0x1u << 1;  		// SYSCTRL_OSC8M_ENABLE bit = bit-1 (page 170)
 1f6:	6a19      	ldr	r1, [r3, #32]
 1f8:	2202      	movs	r2, #2
 1fa:	430a      	orrs	r2, r1
 1fc:	621a      	str	r2, [r3, #32]
	
	PM->CPUSEL.reg = (uint32_t)0;    		// CPU and BUS clocks Divide by 1  (see page 110)
 1fe:	4b0f      	ldr	r3, [pc, #60]	; (23c <Simple_Clk_Init+0x68>)
 200:	2200      	movs	r2, #0
 202:	721a      	strb	r2, [r3, #8]
	PM->APBASEL.reg = (uint32_t)0;     		// APBA clock 0= Divide by 1  (see page 110)
 204:	725a      	strb	r2, [r3, #9]
	PM->APBBSEL.reg = (uint32_t)0;     		// APBB clock 0= Divide by 1  (see page 110)
 206:	729a      	strb	r2, [r3, #10]
	PM->APBCSEL.reg = (uint32_t)0;     		// APBB clock 0= Divide by 1  (see page 110)
 208:	72da      	strb	r2, [r3, #11]

	PM->APBAMASK.reg |= 01u<<3;   			// Enable Generic clock controller clock (page 127)
 20a:	6999      	ldr	r1, [r3, #24]
 20c:	3208      	adds	r2, #8
 20e:	430a      	orrs	r2, r1
 210:	619a      	str	r2, [r3, #24]

	/* Software reset Generic clock to ensure it is re-initialized correctly */

	GCLK->CTRL.reg = 0x1u << 0;   			// Reset gen. clock (see page 94)
 212:	2201      	movs	r2, #1
 214:	4b0a      	ldr	r3, [pc, #40]	; (240 <Simple_Clk_Init+0x6c>)
 216:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & 0x1u ) {  /* Wait for reset to complete */ }
 218:	0019      	movs	r1, r3
 21a:	780b      	ldrb	r3, [r1, #0]
 21c:	4213      	tst	r3, r2
 21e:	d1fc      	bne.n	21a <Simple_Clk_Init+0x46>
	
	// Initialization and enable generic clock #0

	*((uint8_t*)&GCLK->GENDIV.reg) = 0;  		// Select GCLK0 (page 104, Table 14-10)

	GCLK->GENDIV.reg  = 0x0100;   		 	// Divide by 1 for GCLK #0 (page 104)
 220:	4b07      	ldr	r3, [pc, #28]	; (240 <Simple_Clk_Init+0x6c>)
 222:	2280      	movs	r2, #128	; 0x80
 224:	0052      	lsls	r2, r2, #1
 226:	609a      	str	r2, [r3, #8]

	GCLK->GENCTRL.reg = 0x030600;  		 	// GCLK#0 enable, Source=6(OSC8M), IDC=1 (page 101)
 228:	4a06      	ldr	r2, [pc, #24]	; (244 <Simple_Clk_Init+0x70>)
 22a:	605a      	str	r2, [r3, #4]
}
 22c:	4770      	bx	lr
 22e:	46c0      	nop			; (mov r8, r8)
 230:	40000800 	.word	0x40000800
 234:	41004000 	.word	0x41004000
 238:	fffffcff 	.word	0xfffffcff
 23c:	40000400 	.word	0x40000400
 240:	40000c00 	.word	0x40000c00
 244:	00030600 	.word	0x00030600

00000248 <main>:

//global variables
volatile int count = 0;

int main (void)
{
 248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//set micro-controller clock to 8Mhz
	Simple_Clk_Init();
 24a:	4b09      	ldr	r3, [pc, #36]	; (270 <main+0x28>)
 24c:	4798      	blx	r3
	int *ON = (int *)0x41004414; // address for outclr
	int *OFF = (int *)0x41004418; // address for outset
	int *DSET = (int *)0x41004408; // address for dirset
	// Set the direction of LED0 pin to be output
	// PORT_PAxx is defined as (1u << x) so in this case PORT_PA14 = (1u << 14)
	*DSET = 1u << 14; // set led port (PORT_PA14) as an output
 24e:	2280      	movs	r2, #128	; 0x80
 250:	01d2      	lsls	r2, r2, #7
 252:	4b08      	ldr	r3, [pc, #32]	; (274 <main+0x2c>)
 254:	601a      	str	r2, [r3, #0]

	while (1){
		// Toggle the LED
		*ON = 1u << 14; // set logic low to turn led on
 256:	4f08      	ldr	r7, [pc, #32]	; (278 <main+0x30>)
 258:	0015      	movs	r5, r2
 25a:	0016      	movs	r6, r2
		//wait
		wait(100);
 25c:	4c07      	ldr	r4, [pc, #28]	; (27c <main+0x34>)
	// PORT_PAxx is defined as (1u << x) so in this case PORT_PA14 = (1u << 14)
	*DSET = 1u << 14; // set led port (PORT_PA14) as an output

	while (1){
		// Toggle the LED
		*ON = 1u << 14; // set logic low to turn led on
 25e:	603e      	str	r6, [r7, #0]
		//wait
		wait(100);
 260:	2064      	movs	r0, #100	; 0x64
 262:	47a0      	blx	r4
		*OFF = 1u << 14; // set logic high to turn led off
 264:	4b06      	ldr	r3, [pc, #24]	; (280 <main+0x38>)
 266:	601d      	str	r5, [r3, #0]
		wait(100);
 268:	2064      	movs	r0, #100	; 0x64
 26a:	47a0      	blx	r4
 26c:	e7f7      	b.n	25e <main+0x16>
 26e:	46c0      	nop			; (mov r8, r8)
 270:	000001d5 	.word	0x000001d5
 274:	41004408 	.word	0x41004408
 278:	41004414 	.word	0x41004414
 27c:	000001b1 	.word	0x000001b1
 280:	41004418 	.word	0x41004418

00000284 <__libc_init_array>:
 284:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <__libc_init_array+0x3c>)
 286:	b570      	push	{r4, r5, r6, lr}
 288:	2500      	movs	r5, #0
 28a:	001e      	movs	r6, r3
 28c:	4c0d      	ldr	r4, [pc, #52]	; (2c4 <__libc_init_array+0x40>)
 28e:	1ae4      	subs	r4, r4, r3
 290:	10a4      	asrs	r4, r4, #2
 292:	42a5      	cmp	r5, r4
 294:	d004      	beq.n	2a0 <__libc_init_array+0x1c>
 296:	00ab      	lsls	r3, r5, #2
 298:	58f3      	ldr	r3, [r6, r3]
 29a:	4798      	blx	r3
 29c:	3501      	adds	r5, #1
 29e:	e7f8      	b.n	292 <__libc_init_array+0xe>
 2a0:	f000 f816 	bl	2d0 <_init>
 2a4:	4b08      	ldr	r3, [pc, #32]	; (2c8 <__libc_init_array+0x44>)
 2a6:	2500      	movs	r5, #0
 2a8:	001e      	movs	r6, r3
 2aa:	4c08      	ldr	r4, [pc, #32]	; (2cc <__libc_init_array+0x48>)
 2ac:	1ae4      	subs	r4, r4, r3
 2ae:	10a4      	asrs	r4, r4, #2
 2b0:	42a5      	cmp	r5, r4
 2b2:	d004      	beq.n	2be <__libc_init_array+0x3a>
 2b4:	00ab      	lsls	r3, r5, #2
 2b6:	58f3      	ldr	r3, [r6, r3]
 2b8:	4798      	blx	r3
 2ba:	3501      	adds	r5, #1
 2bc:	e7f8      	b.n	2b0 <__libc_init_array+0x2c>
 2be:	bd70      	pop	{r4, r5, r6, pc}
 2c0:	000002dc 	.word	0x000002dc
 2c4:	000002dc 	.word	0x000002dc
 2c8:	000002dc 	.word	0x000002dc
 2cc:	000002e0 	.word	0x000002e0

000002d0 <_init>:
 2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 2d2:	46c0      	nop			; (mov r8, r8)
 2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 2d6:	bc08      	pop	{r3}
 2d8:	469e      	mov	lr, r3
 2da:	4770      	bx	lr

000002dc <__init_array_start>:
 2dc:	000000cd 	.word	0x000000cd

000002e0 <_fini>:
 2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 2e2:	46c0      	nop			; (mov r8, r8)
 2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 2e6:	bc08      	pop	{r3}
 2e8:	469e      	mov	lr, r3
 2ea:	4770      	bx	lr

000002ec <__fini_array_start>:
 2ec:	000000a5 	.word	0x000000a5
